
Simple_FreeRTOS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006568  08006568  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006570  08006570  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049fc  20000014  0800658c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a10  0800658c  00024a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017417  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d56  00000000  00000000  0003745b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  0003a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c8  00000000  00000000  0003b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c3d  00000000  00000000  0003c690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec74  00000000  00000000  0003f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d215c  00000000  00000000  0004df41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012009d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005098  00000000  00000000  00120118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800649c 	.word	0x0800649c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800649c 	.word	0x0800649c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b0a6      	sub	sp, #152	; 0x98
 80004e4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fb75 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f893 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f925 	bl	800073c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 f8f9 	bl	80006e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 80004f6:	f002 fc3f 	bl	8002d78 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  const osSemaphoreAttr_t myBinarySem01_attributes = {
 80004fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	4b35      	ldr	r3, [pc, #212]	; (80005e0 <main+0x100>)
 800050a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    .name = "myBinarySem01"
  };
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 800050e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000512:	461a      	mov	r2, r3
 8000514:	2101      	movs	r1, #1
 8000516:	2001      	movs	r0, #1
 8000518:	f002 fd6e 	bl	8002ff8 <osSemaphoreNew>
 800051c:	4602      	mov	r2, r0
 800051e:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <main+0x104>)
 8000520:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of uart_rx_queue */
  const osMessageQueueAttr_t uart_rx_queue_attributes = {
 8000522:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <main+0x108>)
 8000536:	673b      	str	r3, [r7, #112]	; 0x70
    .name = "uart_rx_queue"
  };
  uart_rx_queueHandle = osMessageQueueNew (256, sizeof(uint8_t), &uart_rx_queue_attributes);
 8000538:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800053c:	461a      	mov	r2, r3
 800053e:	2101      	movs	r1, #1
 8000540:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000544:	f002 feb4 	bl	80032b0 <osMessageQueueNew>
 8000548:	4602      	mov	r2, r0
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <main+0x10c>)
 800054c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800054e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000552:	2224      	movs	r2, #36	; 0x24
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 ff59 	bl	800640e <memset>
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <main+0x110>)
 800055e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	663b      	str	r3, [r7, #96]	; 0x60
 8000564:	2308      	movs	r3, #8
 8000566:	667b      	str	r3, [r7, #100]	; 0x64
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityLow,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000568:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800056c:	461a      	mov	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	4820      	ldr	r0, [pc, #128]	; (80005f4 <main+0x114>)
 8000572:	f002 fc69 	bl	8002e48 <osThreadNew>
 8000576:	4602      	mov	r2, r0
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <main+0x118>)
 800057a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  const osThreadAttr_t myTask02_attributes = {
 800057c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000580:	2224      	movs	r2, #36	; 0x24
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f005 ff42 	bl	800640e <memset>
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <main+0x11c>)
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
 800058e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000594:	2318      	movs	r3, #24
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
    .name = "myTask02",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 1280
  };
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800059c:	461a      	mov	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <main+0x120>)
 80005a2:	f002 fc51 	bl	8002e48 <osThreadNew>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0x124>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  const osThreadAttr_t myTask03_attributes = {
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2224      	movs	r2, #36	; 0x24
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 ff2b 	bl	800640e <memset>
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <main+0x128>)
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80005c0:	61bb      	str	r3, [r7, #24]
 80005c2:	2318      	movs	r3, #24
 80005c4:	61fb      	str	r3, [r7, #28]
    .name = "myTask03",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 1280
  };
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	461a      	mov	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	480f      	ldr	r0, [pc, #60]	; (800060c <main+0x12c>)
 80005ce:	f002 fc3b 	bl	8002e48 <osThreadNew>
 80005d2:	4602      	mov	r2, r0
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <main+0x130>)
 80005d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d8:	f002 fc02 	bl	8002de0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0xfc>
 80005de:	bf00      	nop
 80005e0:	080064b4 	.word	0x080064b4
 80005e4:	20004984 	.word	0x20004984
 80005e8:	080064c4 	.word	0x080064c4
 80005ec:	2000493c 	.word	0x2000493c
 80005f0:	080064d4 	.word	0x080064d4
 80005f4:	080007f9 	.word	0x080007f9
 80005f8:	20004938 	.word	0x20004938
 80005fc:	080064e0 	.word	0x080064e0
 8000600:	08000809 	.word	0x08000809
 8000604:	20004980 	.word	0x20004980
 8000608:	080064ec 	.word	0x080064ec
 800060c:	08000891 	.word	0x08000891
 8000610:	20004988 	.word	0x20004988

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f005 fef3 	bl	800640e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	; 0xa8
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fdaf 	bl	80011fc <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f94a 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f808 	bl	80016dc <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f933 	bl	800093c <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART1_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 80006f4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80006f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 8000720:	f001 fc3e 	bl	8001fa0 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f907 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20004940 	.word	0x20004940
 8000738:	40011000 	.word	0x40011000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_GPIO_Init+0xb0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a24      	ldr	r2, [pc, #144]	; (80007ec <MX_GPIO_Init+0xb0>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_GPIO_Init+0xb0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_GPIO_Init+0xb0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <MX_GPIO_Init+0xb0>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_GPIO_Init+0xb0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_GPIO_Init+0xb0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_GPIO_Init+0xb0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_GPIO_Init+0xb0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	21c0      	movs	r1, #192	; 0xc0
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0xb4>)
 80007ac:	f000 fcf2 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80007b0:	2318      	movs	r3, #24
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <MX_GPIO_Init+0xb8>)
 80007c4:	f000 fb4c 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007c8:	23c0      	movs	r3, #192	; 0xc0
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0xb4>)
 80007e0:	f000 fb3e 	bl	8000e60 <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40021000 	.word	0x40021000

080007f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  {
//	  uint8_t str[] = "1111111111111111111111111111111111111111\r\n";
//	  HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
//
//	  while(!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4)){}
    osDelay(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f002 fbcb 	bl	8002f9c <osDelay>
 8000806:	e7fb      	b.n	8000800 <StartDefaultTask+0x8>

08000808 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  x++;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <StartTask02+0x74>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	4a19      	ldr	r2, [pc, #100]	; (800087c <StartTask02+0x74>)
 8000818:	6013      	str	r3, [r2, #0]
	  int32_t sema_state = osSemaphoreAcquire(myBinarySem01Handle, 10);
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <StartTask02+0x78>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	210a      	movs	r1, #10
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fc87 	bl	8003134 <osSemaphoreAcquire>
 8000826:	6178      	str	r0, [r7, #20]
	  if(sema_state == osOK)
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d121      	bne.n	8000872 <StartTask02+0x6a>
	  {
		  char str1[10];
		  itoa(x, str1, 10);
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <StartTask02+0x74>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f107 0108 	add.w	r1, r7, #8
 8000836:	220a      	movs	r2, #10
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fddb 	bl	80063f4 <itoa>
		  HAL_UART_Transmit(&huart1, str1, strlen(str1), 1000);
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fcc4 	bl	80001d0 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	f107 0108 	add.w	r1, r7, #8
 8000850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <StartTask02+0x7c>)
 8000856:	f001 fbf0 	bl	800203a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, " - Task 2\r\n", 11, 1000);
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	220b      	movs	r2, #11
 8000860:	4909      	ldr	r1, [pc, #36]	; (8000888 <StartTask02+0x80>)
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <StartTask02+0x7c>)
 8000864:	f001 fbe9 	bl	800203a <HAL_UART_Transmit>
		  osSemaphoreRelease(myBinarySem01Handle);
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <StartTask02+0x78>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fcc7 	bl	8003200 <osSemaphoreRelease>
	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <StartTask02+0x84>)
 8000876:	f000 fca6 	bl	80011c6 <HAL_GPIO_TogglePin>
  {
 800087a:	e7c9      	b.n	8000810 <StartTask02+0x8>
 800087c:	20000000 	.word	0x20000000
 8000880:	20004984 	.word	0x20004984
 8000884:	20004940 	.word	0x20004940
 8000888:	080064f8 	.word	0x080064f8
 800088c:	40020000 	.word	0x40020000

08000890 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  x++;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <StartTask03+0x74>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a19      	ldr	r2, [pc, #100]	; (8000904 <StartTask03+0x74>)
 80008a0:	6013      	str	r3, [r2, #0]
	  int32_t sema_state = osSemaphoreAcquire(myBinarySem01Handle, 010);
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <StartTask03+0x78>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2108      	movs	r1, #8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fc43 	bl	8003134 <osSemaphoreAcquire>
 80008ae:	6178      	str	r0, [r7, #20]
	  if(sema_state == osOK)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d121      	bne.n	80008fa <StartTask03+0x6a>
	  {
		  char str1[10];
		  itoa(x, str1, 10);
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <StartTask03+0x74>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f107 0108 	add.w	r1, r7, #8
 80008be:	220a      	movs	r2, #10
 80008c0:	4618      	mov	r0, r3
 80008c2:	f005 fd97 	bl	80063f4 <itoa>
		  HAL_UART_Transmit(&huart1, str1, strlen(str1), 1000);
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	f107 0108 	add.w	r1, r7, #8
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <StartTask03+0x7c>)
 80008de:	f001 fbac 	bl	800203a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, " - Task3\r\n", 11, 1000);
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	220b      	movs	r2, #11
 80008e8:	4909      	ldr	r1, [pc, #36]	; (8000910 <StartTask03+0x80>)
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <StartTask03+0x7c>)
 80008ec:	f001 fba5 	bl	800203a <HAL_UART_Transmit>
		  osSemaphoreRelease(myBinarySem01Handle);
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <StartTask03+0x78>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fc83 	bl	8003200 <osSemaphoreRelease>
	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <StartTask03+0x84>)
 80008fe:	f000 fc62 	bl	80011c6 <HAL_GPIO_TogglePin>
  {
 8000902:	e7c9      	b.n	8000898 <StartTask03+0x8>
 8000904:	20000000 	.word	0x20000000
 8000908:	20004984 	.word	0x20004984
 800090c:	20004940 	.word	0x20004940
 8000910:	08006504 	.word	0x08006504
 8000914:	40020000 	.word	0x40020000

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 f975 	bl	8000c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010000 	.word	0x40010000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_MspInit+0x54>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_MspInit+0x54>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 fa19 	bl	8000dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <HAL_UART_MspInit+0x94>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d134      	bne.n	8000a30 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009d0:	f043 0310 	orr.w	r3, r3, #16
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a10:	2307      	movs	r3, #7
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_UART_MspInit+0x9c>)
 8000a1c:	f000 fa20 	bl	8000e60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2105      	movs	r1, #5
 8000a24:	2025      	movs	r0, #37	; 0x25
 8000a26:	f000 f9cf 	bl	8000dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a2a:	2025      	movs	r0, #37	; 0x25
 8000a2c:	f000 f9e8 	bl	8000e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 f9b5 	bl	8000dc8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000a5e:	2019      	movs	r0, #25
 8000a60:	f000 f9ce 	bl	8000e00 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6453      	str	r3, [r2, #68]	; 0x44
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a80:	f107 0210 	add.w	r2, r7, #16
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f818 	bl	8001ac0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a90:	f001 f802 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 8000a94:	4603      	mov	r3, r0
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <HAL_InitTick+0xa8>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	0c9b      	lsrs	r3, r3, #18
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_InitTick+0xac>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <HAL_InitTick+0xb0>)
 8000aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_InitTick+0xac>)
 8000ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_InitTick+0xac>)
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_InitTick+0xac>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_InitTick+0xac>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <HAL_InitTick+0xac>)
 8000aca:	f001 f82b 	bl	8001b24 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d104      	bne.n	8000ade <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <HAL_InitTick+0xac>)
 8000ad6:	f001 f85a 	bl	8001b8e <HAL_TIM_Base_Start_IT>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	431bde83 	.word	0x431bde83
 8000af0:	2000498c 	.word	0x2000498c
 8000af4:	40010000 	.word	0x40010000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b32:	f001 f850 	bl	8001bd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000498c 	.word	0x2000498c

08000b40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <USART1_IRQHandler+0x10>)
 8000b46:	f001 fb11 	bl	800216c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20004940 	.word	0x20004940

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <SystemInit+0x28>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <SystemInit+0x28>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SystemInit+0x28>)
 8000b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b86:	e003      	b.n	8000b90 <LoopCopyDataInit>

08000b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b8e:	3104      	adds	r1, #4

08000b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b98:	d3f6      	bcc.n	8000b88 <CopyDataInit>
  ldr  r2, =_sbss
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b9c:	e002      	b.n	8000ba4 <LoopFillZerobss>

08000b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ba0:	f842 3b04 	str.w	r3, [r2], #4

08000ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ba8:	d3f9      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000baa:	f7ff ffd3 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f005 fbe5 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb2:	f7ff fc95 	bl	80004e0 <main>
  bx  lr    
 8000bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bbc:	08006578 	.word	0x08006578
  ldr  r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bc4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000bc8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000bcc:	20004a10 	.word	0x20004a10

08000bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <HAL_Init+0x40>)
 8000bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_Init+0x40>)
 8000bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_Init+0x40>)
 8000bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f8d8 	bl	8000db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff1e 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fea0 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023c00 	.word	0x40023c00

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	200049cc 	.word	0x200049cc

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200049cc 	.word	0x200049cc

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff4c 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dda:	f7ff ff61 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	6978      	ldr	r0, [r7, #20]
 8000de6:	f7ff ffb1 	bl	8000d4c <NVIC_EncodePriority>
 8000dea:	4602      	mov	r2, r0
 8000dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff80 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff54 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d004      	beq.n	8000e3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00c      	b.n	8000e54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e16b      	b.n	8001154 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 815a 	bne.w	800114e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d00b      	beq.n	8000eba <HAL_GPIO_Init+0x5a>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eae:	2b11      	cmp	r3, #17
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0xfc>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b12      	cmp	r3, #18
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80b4 	beq.w	800114e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b5f      	ldr	r3, [pc, #380]	; (8001168 <HAL_GPIO_Init+0x308>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a5e      	ldr	r2, [pc, #376]	; (8001168 <HAL_GPIO_Init+0x308>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b5c      	ldr	r3, [pc, #368]	; (8001168 <HAL_GPIO_Init+0x308>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001002:	4a5a      	ldr	r2, [pc, #360]	; (800116c <HAL_GPIO_Init+0x30c>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a51      	ldr	r2, [pc, #324]	; (8001170 <HAL_GPIO_Init+0x310>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d02b      	beq.n	8001086 <HAL_GPIO_Init+0x226>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a50      	ldr	r2, [pc, #320]	; (8001174 <HAL_GPIO_Init+0x314>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d025      	beq.n	8001082 <HAL_GPIO_Init+0x222>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4f      	ldr	r2, [pc, #316]	; (8001178 <HAL_GPIO_Init+0x318>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d01f      	beq.n	800107e <HAL_GPIO_Init+0x21e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_GPIO_Init+0x31c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d019      	beq.n	800107a <HAL_GPIO_Init+0x21a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_GPIO_Init+0x320>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x216>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x324>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x212>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_GPIO_Init+0x328>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x20e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_GPIO_Init+0x32c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x20a>
 8001066:	2307      	movs	r3, #7
 8001068:	e00e      	b.n	8001088 <HAL_GPIO_Init+0x228>
 800106a:	2308      	movs	r3, #8
 800106c:	e00c      	b.n	8001088 <HAL_GPIO_Init+0x228>
 800106e:	2306      	movs	r3, #6
 8001070:	e00a      	b.n	8001088 <HAL_GPIO_Init+0x228>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x228>
 8001076:	2304      	movs	r3, #4
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x228>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x228>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x228>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x228>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001098:	4934      	ldr	r1, [pc, #208]	; (800116c <HAL_GPIO_Init+0x30c>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_GPIO_Init+0x330>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ca:	4a31      	ldr	r2, [pc, #196]	; (8001190 <HAL_GPIO_Init+0x330>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_GPIO_Init+0x330>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f4:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_GPIO_Init+0x330>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_GPIO_Init+0x330>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <HAL_GPIO_Init+0x330>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_GPIO_Init+0x330>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <HAL_GPIO_Init+0x330>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f ae90 	bls.w	8000e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	3724      	adds	r7, #36	; 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800
 800116c:	40013800 	.word	0x40013800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40021000 	.word	0x40021000
 8001184:	40021400 	.word	0x40021400
 8001188:	40021800 	.word	0x40021800
 800118c:	40021c00 	.word	0x40021c00
 8001190:	40013c00 	.word	0x40013c00

08001194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b0:	e003      	b.n	80011ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	401a      	ands	r2, r3
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d104      	bne.n	80011ea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	041a      	lsls	r2, r3, #16
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e25b      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d075      	beq.n	8001306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121a:	4ba3      	ldr	r3, [pc, #652]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b04      	cmp	r3, #4
 8001224:	d00c      	beq.n	8001240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4ba0      	ldr	r3, [pc, #640]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122e:	2b08      	cmp	r3, #8
 8001230:	d112      	bne.n	8001258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4b9d      	ldr	r3, [pc, #628]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800123e:	d10b      	bne.n	8001258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4b99      	ldr	r3, [pc, #612]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d05b      	beq.n	8001304 <HAL_RCC_OscConfig+0x108>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d157      	bne.n	8001304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e236      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d106      	bne.n	8001270 <HAL_RCC_OscConfig+0x74>
 8001262:	4b91      	ldr	r3, [pc, #580]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a90      	ldr	r2, [pc, #576]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e01d      	b.n	80012ac <HAL_RCC_OscConfig+0xb0>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x98>
 800127a:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a8a      	ldr	r2, [pc, #552]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b88      	ldr	r3, [pc, #544]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a87      	ldr	r2, [pc, #540]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0xb0>
 8001294:	4b84      	ldr	r3, [pc, #528]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a83      	ldr	r2, [pc, #524]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800129a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b81      	ldr	r3, [pc, #516]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a80      	ldr	r2, [pc, #512]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fcc4 	bl	8000c40 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fcc0 	bl	8000c40 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1fb      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0xc0>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fcb0 	bl	8000c40 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fcac 	bl	8000c40 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e1e7      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	4b6c      	ldr	r3, [pc, #432]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0xe8>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d063      	beq.n	80013da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001312:	4b65      	ldr	r3, [pc, #404]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b62      	ldr	r3, [pc, #392]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001326:	2b08      	cmp	r3, #8
 8001328:	d11c      	bne.n	8001364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d116      	bne.n	8001364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x152>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e1bb      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4952      	ldr	r1, [pc, #328]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	e03a      	b.n	80013da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d020      	beq.n	80013ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136c:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <HAL_RCC_OscConfig+0x2b0>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001372:	f7ff fc65 	bl	8000c40 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fc61 	bl	8000c40 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e19c      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4940      	ldr	r1, [pc, #256]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
 80013ac:	e015      	b.n	80013da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <HAL_RCC_OscConfig+0x2b0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc44 	bl	8000c40 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013bc:	f7ff fc40 	bl	8000c40 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e17b      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d030      	beq.n	8001448 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d016      	beq.n	800141c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <HAL_RCC_OscConfig+0x2b4>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff fc24 	bl	8000c40 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc20 	bl	8000c40 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e15b      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x200>
 800141a:	e015      	b.n	8001448 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_RCC_OscConfig+0x2b4>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fc0d 	bl	8000c40 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142a:	f7ff fc09 	bl	8000c40 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e144      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80a0 	beq.w	8001596 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x2b8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d121      	bne.n	80014d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_RCC_OscConfig+0x2b8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_RCC_OscConfig+0x2b8>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbcf 	bl	8000c40 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e011      	b.n	80014ca <HAL_RCC_OscConfig+0x2ce>
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	42470000 	.word	0x42470000
 80014b0:	42470e80 	.word	0x42470e80
 80014b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b8:	f7ff fbc2 	bl	8000c40 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0fd      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d106      	bne.n	80014ec <HAL_RCC_OscConfig+0x2f0>
 80014de:	4b7d      	ldr	r3, [pc, #500]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	4a7c      	ldr	r2, [pc, #496]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ea:	e01c      	b.n	8001526 <HAL_RCC_OscConfig+0x32a>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x312>
 80014f4:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a76      	ldr	r2, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001500:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a73      	ldr	r2, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	e00b      	b.n	8001526 <HAL_RCC_OscConfig+0x32a>
 800150e:	4b71      	ldr	r3, [pc, #452]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001512:	4a70      	ldr	r2, [pc, #448]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6713      	str	r3, [r2, #112]	; 0x70
 800151a:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a6d      	ldr	r2, [pc, #436]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d015      	beq.n	800155a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff fb87 	bl	8000c40 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fb83 	bl	8000c40 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0bc      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ee      	beq.n	8001536 <HAL_RCC_OscConfig+0x33a>
 8001558:	e014      	b.n	8001584 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fb71 	bl	8000c40 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fb6d 	bl	8000c40 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0a6      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ee      	bne.n	8001562 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d105      	bne.n	8001596 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158a:	4b52      	ldr	r3, [pc, #328]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 8001590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8092 	beq.w	80016c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a0:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 030c 	and.w	r3, r3, #12
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d05c      	beq.n	8001666 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d141      	bne.n	8001638 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b4:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb41 	bl	8000c40 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff fb3d 	bl	8000c40 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e078      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69da      	ldr	r2, [r3, #28]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	019b      	lsls	r3, r3, #6
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	085b      	lsrs	r3, r3, #1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	061b      	lsls	r3, r3, #24
 8001604:	4933      	ldr	r1, [pc, #204]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160a:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fb16 	bl	8000c40 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fb12 	bl	8000c40 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e04d      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x41c>
 8001636:	e045      	b.n	80016c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x4dc>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff faff 	bl	8000c40 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fafb 	bl	8000c40 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e036      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x44a>
 8001664:	e02e      	b.n	80016c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e029      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_RCC_OscConfig+0x4d8>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	429a      	cmp	r2, r3
 8001684:	d11c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d115      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d10d      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40007000 	.word	0x40007000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	42470060 	.word	0x42470060

080016dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0cc      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b68      	ldr	r3, [pc, #416]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d90c      	bls.n	8001718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b65      	ldr	r3, [pc, #404]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b63      	ldr	r3, [pc, #396]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0b8      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001730:	4b59      	ldr	r3, [pc, #356]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a58      	ldr	r2, [pc, #352]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800173a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001748:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a52      	ldr	r2, [pc, #328]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001754:	4b50      	ldr	r3, [pc, #320]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	494d      	ldr	r1, [pc, #308]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d044      	beq.n	80017fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b47      	ldr	r3, [pc, #284]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d119      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e07f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d003      	beq.n	800179a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001796:	2b03      	cmp	r3, #3
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e06f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017aa:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e067      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f023 0203 	bic.w	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4934      	ldr	r1, [pc, #208]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017cc:	f7ff fa38 	bl	8000c40 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f7ff fa34 	bl	8000c40 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e04f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 020c 	and.w	r2, r3, #12
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d1eb      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d20c      	bcs.n	8001824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e032      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4916      	ldr	r1, [pc, #88]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	490e      	ldr	r1, [pc, #56]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001862:	f000 f821 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 8001866:	4601      	mov	r1, r0
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	fa21 f303 	lsr.w	r3, r1, r3
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f8de 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00
 8001898:	40023800 	.word	0x40023800
 800189c:	08006528 	.word	0x08006528
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000008 	.word	0x20000008

080018a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d007      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x32>
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d008      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x38>
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80b4 	bne.w	8001a3c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018d6:	60bb      	str	r3, [r7, #8]
       break;
 80018d8:	e0b3      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018da:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80018dc:	60bb      	str	r3, [r7, #8]
      break;
 80018de:	e0b0      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e0:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ea:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d04a      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f6:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	f04f 0400 	mov.w	r4, #0
 8001900:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	ea03 0501 	and.w	r5, r3, r1
 800190c:	ea04 0602 	and.w	r6, r4, r2
 8001910:	4629      	mov	r1, r5
 8001912:	4632      	mov	r2, r6
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	f04f 0400 	mov.w	r4, #0
 800191c:	0154      	lsls	r4, r2, #5
 800191e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001922:	014b      	lsls	r3, r1, #5
 8001924:	4619      	mov	r1, r3
 8001926:	4622      	mov	r2, r4
 8001928:	1b49      	subs	r1, r1, r5
 800192a:	eb62 0206 	sbc.w	r2, r2, r6
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f04f 0400 	mov.w	r4, #0
 8001936:	0194      	lsls	r4, r2, #6
 8001938:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800193c:	018b      	lsls	r3, r1, #6
 800193e:	1a5b      	subs	r3, r3, r1
 8001940:	eb64 0402 	sbc.w	r4, r4, r2
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	00e2      	lsls	r2, r4, #3
 800194e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001952:	00d9      	lsls	r1, r3, #3
 8001954:	460b      	mov	r3, r1
 8001956:	4614      	mov	r4, r2
 8001958:	195b      	adds	r3, r3, r5
 800195a:	eb44 0406 	adc.w	r4, r4, r6
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	0262      	lsls	r2, r4, #9
 8001968:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800196c:	0259      	lsls	r1, r3, #9
 800196e:	460b      	mov	r3, r1
 8001970:	4614      	mov	r4, r2
 8001972:	4618      	mov	r0, r3
 8001974:	4621      	mov	r1, r4
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f04f 0400 	mov.w	r4, #0
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	f7fe fc2e 	bl	80001e0 <__aeabi_uldivmod>
 8001984:	4603      	mov	r3, r0
 8001986:	460c      	mov	r4, r1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e049      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	f04f 0400 	mov.w	r4, #0
 8001996:	f240 11ff 	movw	r1, #511	; 0x1ff
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	ea03 0501 	and.w	r5, r3, r1
 80019a2:	ea04 0602 	and.w	r6, r4, r2
 80019a6:	4629      	mov	r1, r5
 80019a8:	4632      	mov	r2, r6
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	f04f 0400 	mov.w	r4, #0
 80019b2:	0154      	lsls	r4, r2, #5
 80019b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019b8:	014b      	lsls	r3, r1, #5
 80019ba:	4619      	mov	r1, r3
 80019bc:	4622      	mov	r2, r4
 80019be:	1b49      	subs	r1, r1, r5
 80019c0:	eb62 0206 	sbc.w	r2, r2, r6
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	0194      	lsls	r4, r2, #6
 80019ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d2:	018b      	lsls	r3, r1, #6
 80019d4:	1a5b      	subs	r3, r3, r1
 80019d6:	eb64 0402 	sbc.w	r4, r4, r2
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	00e2      	lsls	r2, r4, #3
 80019e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019e8:	00d9      	lsls	r1, r3, #3
 80019ea:	460b      	mov	r3, r1
 80019ec:	4614      	mov	r4, r2
 80019ee:	195b      	adds	r3, r3, r5
 80019f0:	eb44 0406 	adc.w	r4, r4, r6
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	02a2      	lsls	r2, r4, #10
 80019fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a02:	0299      	lsls	r1, r3, #10
 8001a04:	460b      	mov	r3, r1
 8001a06:	4614      	mov	r4, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f04f 0400 	mov.w	r4, #0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4623      	mov	r3, r4
 8001a16:	f7fe fbe3 	bl	80001e0 <__aeabi_uldivmod>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	60bb      	str	r3, [r7, #8]
      break;
 8001a3a:	e002      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a3e:	60bb      	str	r3, [r7, #8]
      break;
 8001a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a42:	68bb      	ldr	r3, [r7, #8]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	007a1200 	.word	0x007a1200

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a78:	4601      	mov	r1, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	08006538 	.word	0x08006538

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a9c:	f7ff ffdc 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0b5b      	lsrs	r3, r3, #13
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08006538 	.word	0x08006538

08001ac0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	220f      	movs	r2, #15
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_RCC_GetClockConfig+0x60>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e01d      	b.n	8001b72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f815 	bl	8001b7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f000 f968 	bl	8001e38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d007      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d122      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d11b      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f06f 0202 	mvn.w	r2, #2
 8001c02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f8ee 	bl	8001dfa <HAL_TIM_IC_CaptureCallback>
 8001c1e:	e005      	b.n	8001c2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f8e0 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8f1 	bl	8001e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d122      	bne.n	8001c86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d11b      	bne.n	8001c86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0204 	mvn.w	r2, #4
 8001c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f8c4 	bl	8001dfa <HAL_TIM_IC_CaptureCallback>
 8001c72:	e005      	b.n	8001c80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8b6 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8c7 	bl	8001e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d122      	bne.n	8001cda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d11b      	bne.n	8001cda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0208 	mvn.w	r2, #8
 8001caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f89a 	bl	8001dfa <HAL_TIM_IC_CaptureCallback>
 8001cc6:	e005      	b.n	8001cd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f88c 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f89d 	bl	8001e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d122      	bne.n	8001d2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d11b      	bne.n	8001d2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f06f 0210 	mvn.w	r2, #16
 8001cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2208      	movs	r2, #8
 8001d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f870 	bl	8001dfa <HAL_TIM_IC_CaptureCallback>
 8001d1a:	e005      	b.n	8001d28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f862 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f873 	bl	8001e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10e      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0201 	mvn.w	r2, #1
 8001d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7fe fddf 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d64:	2b80      	cmp	r3, #128	; 0x80
 8001d66:	d10e      	bne.n	8001d86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b80      	cmp	r3, #128	; 0x80
 8001d74:	d107      	bne.n	8001d86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f903 	bl	8001f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	2b40      	cmp	r3, #64	; 0x40
 8001d92:	d10e      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	d107      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f838 	bl	8001e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d10e      	bne.n	8001dde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d107      	bne.n	8001dde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0220 	mvn.w	r2, #32
 8001dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8cd 	bl	8001f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a40      	ldr	r2, [pc, #256]	; (8001f4c <TIM_Base_SetConfig+0x114>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <TIM_Base_SetConfig+0x40>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e56:	d00f      	beq.n	8001e78 <TIM_Base_SetConfig+0x40>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3d      	ldr	r2, [pc, #244]	; (8001f50 <TIM_Base_SetConfig+0x118>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00b      	beq.n	8001e78 <TIM_Base_SetConfig+0x40>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <TIM_Base_SetConfig+0x11c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <TIM_Base_SetConfig+0x40>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <TIM_Base_SetConfig+0x120>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <TIM_Base_SetConfig+0x40>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3a      	ldr	r2, [pc, #232]	; (8001f5c <TIM_Base_SetConfig+0x124>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d108      	bne.n	8001e8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <TIM_Base_SetConfig+0x114>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d02b      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e98:	d027      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <TIM_Base_SetConfig+0x118>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d023      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <TIM_Base_SetConfig+0x11c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01f      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <TIM_Base_SetConfig+0x120>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01b      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <TIM_Base_SetConfig+0x124>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d017      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <TIM_Base_SetConfig+0x128>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <TIM_Base_SetConfig+0x12c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00f      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <TIM_Base_SetConfig+0x130>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00b      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a25      	ldr	r2, [pc, #148]	; (8001f6c <TIM_Base_SetConfig+0x134>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <TIM_Base_SetConfig+0x138>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d003      	beq.n	8001eea <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <TIM_Base_SetConfig+0x13c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d108      	bne.n	8001efc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <TIM_Base_SetConfig+0x114>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d003      	beq.n	8001f30 <TIM_Base_SetConfig+0xf8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a0c      	ldr	r2, [pc, #48]	; (8001f5c <TIM_Base_SetConfig+0x124>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d103      	bne.n	8001f38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	615a      	str	r2, [r3, #20]
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40000c00 	.word	0x40000c00
 8001f5c:	40010400 	.word	0x40010400
 8001f60:	40014000 	.word	0x40014000
 8001f64:	40014400 	.word	0x40014400
 8001f68:	40014800 	.word	0x40014800
 8001f6c:	40001800 	.word	0x40001800
 8001f70:	40001c00 	.word	0x40001c00
 8001f74:	40002000 	.word	0x40002000

08001f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e03f      	b.n	8002032 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fcec 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2224      	movs	r2, #36	; 0x24
 8001fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fb4b 	bl	8002680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b088      	sub	sp, #32
 800203e:	af02      	add	r7, sp, #8
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b20      	cmp	r3, #32
 8002058:	f040 8083 	bne.w	8002162 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_UART_Transmit+0x2e>
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e07b      	b.n	8002164 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_UART_Transmit+0x40>
 8002076:	2302      	movs	r3, #2
 8002078:	e074      	b.n	8002164 <HAL_UART_Transmit+0x12a>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2221      	movs	r2, #33	; 0x21
 800208c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002090:	f7fe fdd6 	bl	8000c40 <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020aa:	e042      	b.n	8002132 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c2:	d122      	bne.n	800210a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2200      	movs	r2, #0
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f96a 	bl	80023a8 <UART_WaitOnFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e042      	b.n	8002164 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d103      	bne.n	8002102 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3302      	adds	r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	e017      	b.n	8002132 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	e013      	b.n	8002132 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f947 	bl	80023a8 <UART_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e01f      	b.n	8002164 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1b7      	bne.n	80020ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2200      	movs	r2, #0
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f92e 	bl	80023a8 <UART_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e006      	b.n	8002164 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
  }
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_UART_IRQHandler+0x52>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f9e0 	bl	800257c <UART_Receive_IT>
      return;
 80021bc:	e0d1      	b.n	8002362 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80b0 	beq.w	8002326 <HAL_UART_IRQHandler+0x1ba>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_UART_IRQHandler+0x70>
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80a5 	beq.w	8002326 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_UART_IRQHandler+0x90>
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_UART_IRQHandler+0xb0>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	f043 0202 	orr.w	r2, r3, #2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_UART_IRQHandler+0xd0>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00f      	beq.n	8002266 <HAL_UART_IRQHandler+0xfa>
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <HAL_UART_IRQHandler+0xee>
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	f043 0208 	orr.w	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d078      	beq.n	8002360 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_UART_IRQHandler+0x11c>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f97a 	bl	800257c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	2b40      	cmp	r3, #64	; 0x40
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_UART_IRQHandler+0x144>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d031      	beq.n	8002314 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f8c3 	bl	800243c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d123      	bne.n	800230c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_UART_IRQHandler+0x1fc>)
 80022e2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fd97 	bl	8000e1c <HAL_DMA_Abort_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d016      	beq.n	8002322 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022fe:	4610      	mov	r0, r2
 8002300:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002302:	e00e      	b.n	8002322 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f845 	bl	8002394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230a:	e00a      	b.n	8002322 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f841 	bl	8002394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002312:	e006      	b.n	8002322 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f83d 	bl	8002394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002320:	e01e      	b.n	8002360 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002322:	bf00      	nop
    return;
 8002324:	e01c      	b.n	8002360 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_UART_IRQHandler+0x1d6>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f8b0 	bl	80024a0 <UART_Transmit_IT>
    return;
 8002340:	e00f      	b.n	8002362 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <HAL_UART_IRQHandler+0x1f6>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8f8 	bl	800254c <UART_EndTransmit_IT>
    return;
 800235c:	bf00      	nop
 800235e:	e000      	b.n	8002362 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002360:	bf00      	nop
  }
}
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	08002479 	.word	0x08002479

0800236c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b8:	e02c      	b.n	8002414 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d028      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80023c8:	f7fe fc3a 	bl	8000c40 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d21d      	bcs.n	8002414 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e00f      	b.n	8002434 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	429a      	cmp	r2, r3
 8002430:	d0c3      	beq.n	80023ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002452:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff ff7e 	bl	8002394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b21      	cmp	r3, #33	; 0x21
 80024b2:	d144      	bne.n	800253e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d11a      	bne.n	80024f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	1c9a      	adds	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	621a      	str	r2, [r3, #32]
 80024e6:	e00e      	b.n	8002506 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	621a      	str	r2, [r3, #32]
 80024f2:	e008      	b.n	8002506 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	1c59      	adds	r1, r3, #1
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6211      	str	r1, [r2, #32]
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29b      	uxth	r3, r3
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4619      	mov	r1, r3
 8002514:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002528:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002538:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002562:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fefd 	bl	800236c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b22      	cmp	r3, #34	; 0x22
 800258e:	d171      	bne.n	8002674 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002598:	d123      	bne.n	80025e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10e      	bne.n	80025c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	1c9a      	adds	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
 80025c4:	e029      	b.n	800261a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
 80025e0:	e01b      	b.n	800261a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6858      	ldr	r0, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	1c59      	adds	r1, r3, #1
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6291      	str	r1, [r2, #40]	; 0x28
 80025fa:	b2c2      	uxtb	r2, r0
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e00c      	b.n	800261a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	1c58      	adds	r0, r3, #1
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	6288      	str	r0, [r1, #40]	; 0x28
 8002612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29b      	uxth	r3, r3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4619      	mov	r1, r3
 8002628:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800262a:	2b00      	cmp	r3, #0
 800262c:	d120      	bne.n	8002670 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0220 	bic.w	r2, r2, #32
 800263c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fe8a 	bl	8002380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e002      	b.n	8002676 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026c2:	f023 030c 	bic.w	r3, r3, #12
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ee:	f040 818b 	bne.w	8002a08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4ac1      	ldr	r2, [pc, #772]	; (80029fc <UART_SetConfig+0x37c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d005      	beq.n	8002708 <UART_SetConfig+0x88>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4abf      	ldr	r2, [pc, #764]	; (8002a00 <UART_SetConfig+0x380>)
 8002702:	4293      	cmp	r3, r2
 8002704:	f040 80bd 	bne.w	8002882 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002708:	f7ff f9c6 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 800270c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	461d      	mov	r5, r3
 8002712:	f04f 0600 	mov.w	r6, #0
 8002716:	46a8      	mov	r8, r5
 8002718:	46b1      	mov	r9, r6
 800271a:	eb18 0308 	adds.w	r3, r8, r8
 800271e:	eb49 0409 	adc.w	r4, r9, r9
 8002722:	4698      	mov	r8, r3
 8002724:	46a1      	mov	r9, r4
 8002726:	eb18 0805 	adds.w	r8, r8, r5
 800272a:	eb49 0906 	adc.w	r9, r9, r6
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800273a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800273e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002742:	4688      	mov	r8, r1
 8002744:	4691      	mov	r9, r2
 8002746:	eb18 0005 	adds.w	r0, r8, r5
 800274a:	eb49 0106 	adc.w	r1, r9, r6
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	461d      	mov	r5, r3
 8002754:	f04f 0600 	mov.w	r6, #0
 8002758:	196b      	adds	r3, r5, r5
 800275a:	eb46 0406 	adc.w	r4, r6, r6
 800275e:	461a      	mov	r2, r3
 8002760:	4623      	mov	r3, r4
 8002762:	f7fd fd3d 	bl	80001e0 <__aeabi_uldivmod>
 8002766:	4603      	mov	r3, r0
 8002768:	460c      	mov	r4, r1
 800276a:	461a      	mov	r2, r3
 800276c:	4ba5      	ldr	r3, [pc, #660]	; (8002a04 <UART_SetConfig+0x384>)
 800276e:	fba3 2302 	umull	r2, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	461d      	mov	r5, r3
 800277c:	f04f 0600 	mov.w	r6, #0
 8002780:	46a9      	mov	r9, r5
 8002782:	46b2      	mov	sl, r6
 8002784:	eb19 0309 	adds.w	r3, r9, r9
 8002788:	eb4a 040a 	adc.w	r4, sl, sl
 800278c:	4699      	mov	r9, r3
 800278e:	46a2      	mov	sl, r4
 8002790:	eb19 0905 	adds.w	r9, r9, r5
 8002794:	eb4a 0a06 	adc.w	sl, sl, r6
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027ac:	4689      	mov	r9, r1
 80027ae:	4692      	mov	sl, r2
 80027b0:	eb19 0005 	adds.w	r0, r9, r5
 80027b4:	eb4a 0106 	adc.w	r1, sl, r6
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	461d      	mov	r5, r3
 80027be:	f04f 0600 	mov.w	r6, #0
 80027c2:	196b      	adds	r3, r5, r5
 80027c4:	eb46 0406 	adc.w	r4, r6, r6
 80027c8:	461a      	mov	r2, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	f7fd fd08 	bl	80001e0 <__aeabi_uldivmod>
 80027d0:	4603      	mov	r3, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b8b      	ldr	r3, [pc, #556]	; (8002a04 <UART_SetConfig+0x384>)
 80027d8:	fba3 1302 	umull	r1, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	2164      	movs	r1, #100	; 0x64
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	3332      	adds	r3, #50	; 0x32
 80027ea:	4a86      	ldr	r2, [pc, #536]	; (8002a04 <UART_SetConfig+0x384>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f8:	4498      	add	r8, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	461d      	mov	r5, r3
 80027fe:	f04f 0600 	mov.w	r6, #0
 8002802:	46a9      	mov	r9, r5
 8002804:	46b2      	mov	sl, r6
 8002806:	eb19 0309 	adds.w	r3, r9, r9
 800280a:	eb4a 040a 	adc.w	r4, sl, sl
 800280e:	4699      	mov	r9, r3
 8002810:	46a2      	mov	sl, r4
 8002812:	eb19 0905 	adds.w	r9, r9, r5
 8002816:	eb4a 0a06 	adc.w	sl, sl, r6
 800281a:	f04f 0100 	mov.w	r1, #0
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002826:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800282a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800282e:	4689      	mov	r9, r1
 8002830:	4692      	mov	sl, r2
 8002832:	eb19 0005 	adds.w	r0, r9, r5
 8002836:	eb4a 0106 	adc.w	r1, sl, r6
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	461d      	mov	r5, r3
 8002840:	f04f 0600 	mov.w	r6, #0
 8002844:	196b      	adds	r3, r5, r5
 8002846:	eb46 0406 	adc.w	r4, r6, r6
 800284a:	461a      	mov	r2, r3
 800284c:	4623      	mov	r3, r4
 800284e:	f7fd fcc7 	bl	80001e0 <__aeabi_uldivmod>
 8002852:	4603      	mov	r3, r0
 8002854:	460c      	mov	r4, r1
 8002856:	461a      	mov	r2, r3
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <UART_SetConfig+0x384>)
 800285a:	fba3 1302 	umull	r1, r3, r3, r2
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2164      	movs	r1, #100	; 0x64
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	3332      	adds	r3, #50	; 0x32
 800286c:	4a65      	ldr	r2, [pc, #404]	; (8002a04 <UART_SetConfig+0x384>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	f003 0207 	and.w	r2, r3, #7
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4442      	add	r2, r8
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e26f      	b.n	8002d62 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002882:	f7ff f8f5 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002886:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	461d      	mov	r5, r3
 800288c:	f04f 0600 	mov.w	r6, #0
 8002890:	46a8      	mov	r8, r5
 8002892:	46b1      	mov	r9, r6
 8002894:	eb18 0308 	adds.w	r3, r8, r8
 8002898:	eb49 0409 	adc.w	r4, r9, r9
 800289c:	4698      	mov	r8, r3
 800289e:	46a1      	mov	r9, r4
 80028a0:	eb18 0805 	adds.w	r8, r8, r5
 80028a4:	eb49 0906 	adc.w	r9, r9, r6
 80028a8:	f04f 0100 	mov.w	r1, #0
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028bc:	4688      	mov	r8, r1
 80028be:	4691      	mov	r9, r2
 80028c0:	eb18 0005 	adds.w	r0, r8, r5
 80028c4:	eb49 0106 	adc.w	r1, r9, r6
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	461d      	mov	r5, r3
 80028ce:	f04f 0600 	mov.w	r6, #0
 80028d2:	196b      	adds	r3, r5, r5
 80028d4:	eb46 0406 	adc.w	r4, r6, r6
 80028d8:	461a      	mov	r2, r3
 80028da:	4623      	mov	r3, r4
 80028dc:	f7fd fc80 	bl	80001e0 <__aeabi_uldivmod>
 80028e0:	4603      	mov	r3, r0
 80028e2:	460c      	mov	r4, r1
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <UART_SetConfig+0x384>)
 80028e8:	fba3 2302 	umull	r2, r3, r3, r2
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	461d      	mov	r5, r3
 80028f6:	f04f 0600 	mov.w	r6, #0
 80028fa:	46a9      	mov	r9, r5
 80028fc:	46b2      	mov	sl, r6
 80028fe:	eb19 0309 	adds.w	r3, r9, r9
 8002902:	eb4a 040a 	adc.w	r4, sl, sl
 8002906:	4699      	mov	r9, r3
 8002908:	46a2      	mov	sl, r4
 800290a:	eb19 0905 	adds.w	r9, r9, r5
 800290e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002922:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002926:	4689      	mov	r9, r1
 8002928:	4692      	mov	sl, r2
 800292a:	eb19 0005 	adds.w	r0, r9, r5
 800292e:	eb4a 0106 	adc.w	r1, sl, r6
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	461d      	mov	r5, r3
 8002938:	f04f 0600 	mov.w	r6, #0
 800293c:	196b      	adds	r3, r5, r5
 800293e:	eb46 0406 	adc.w	r4, r6, r6
 8002942:	461a      	mov	r2, r3
 8002944:	4623      	mov	r3, r4
 8002946:	f7fd fc4b 	bl	80001e0 <__aeabi_uldivmod>
 800294a:	4603      	mov	r3, r0
 800294c:	460c      	mov	r4, r1
 800294e:	461a      	mov	r2, r3
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <UART_SetConfig+0x384>)
 8002952:	fba3 1302 	umull	r1, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2164      	movs	r1, #100	; 0x64
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <UART_SetConfig+0x384>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002972:	4498      	add	r8, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	461d      	mov	r5, r3
 8002978:	f04f 0600 	mov.w	r6, #0
 800297c:	46a9      	mov	r9, r5
 800297e:	46b2      	mov	sl, r6
 8002980:	eb19 0309 	adds.w	r3, r9, r9
 8002984:	eb4a 040a 	adc.w	r4, sl, sl
 8002988:	4699      	mov	r9, r3
 800298a:	46a2      	mov	sl, r4
 800298c:	eb19 0905 	adds.w	r9, r9, r5
 8002990:	eb4a 0a06 	adc.w	sl, sl, r6
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029a8:	4689      	mov	r9, r1
 80029aa:	4692      	mov	sl, r2
 80029ac:	eb19 0005 	adds.w	r0, r9, r5
 80029b0:	eb4a 0106 	adc.w	r1, sl, r6
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	461d      	mov	r5, r3
 80029ba:	f04f 0600 	mov.w	r6, #0
 80029be:	196b      	adds	r3, r5, r5
 80029c0:	eb46 0406 	adc.w	r4, r6, r6
 80029c4:	461a      	mov	r2, r3
 80029c6:	4623      	mov	r3, r4
 80029c8:	f7fd fc0a 	bl	80001e0 <__aeabi_uldivmod>
 80029cc:	4603      	mov	r3, r0
 80029ce:	460c      	mov	r4, r1
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <UART_SetConfig+0x384>)
 80029d4:	fba3 1302 	umull	r1, r3, r3, r2
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	2164      	movs	r1, #100	; 0x64
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	3332      	adds	r3, #50	; 0x32
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <UART_SetConfig+0x384>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	f003 0207 	and.w	r2, r3, #7
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4442      	add	r2, r8
 80029f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029fa:	e1b2      	b.n	8002d62 <UART_SetConfig+0x6e2>
 80029fc:	40011000 	.word	0x40011000
 8002a00:	40011400 	.word	0x40011400
 8002a04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4ad7      	ldr	r2, [pc, #860]	; (8002d6c <UART_SetConfig+0x6ec>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d005      	beq.n	8002a1e <UART_SetConfig+0x39e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4ad6      	ldr	r2, [pc, #856]	; (8002d70 <UART_SetConfig+0x6f0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	f040 80d1 	bne.w	8002bc0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a1e:	f7ff f83b 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 8002a22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	469a      	mov	sl, r3
 8002a28:	f04f 0b00 	mov.w	fp, #0
 8002a2c:	46d0      	mov	r8, sl
 8002a2e:	46d9      	mov	r9, fp
 8002a30:	eb18 0308 	adds.w	r3, r8, r8
 8002a34:	eb49 0409 	adc.w	r4, r9, r9
 8002a38:	4698      	mov	r8, r3
 8002a3a:	46a1      	mov	r9, r4
 8002a3c:	eb18 080a 	adds.w	r8, r8, sl
 8002a40:	eb49 090b 	adc.w	r9, r9, fp
 8002a44:	f04f 0100 	mov.w	r1, #0
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a58:	4688      	mov	r8, r1
 8002a5a:	4691      	mov	r9, r2
 8002a5c:	eb1a 0508 	adds.w	r5, sl, r8
 8002a60:	eb4b 0609 	adc.w	r6, fp, r9
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	f04f 0400 	mov.w	r4, #0
 8002a76:	0094      	lsls	r4, r2, #2
 8002a78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a7c:	008b      	lsls	r3, r1, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4623      	mov	r3, r4
 8002a82:	4628      	mov	r0, r5
 8002a84:	4631      	mov	r1, r6
 8002a86:	f7fd fbab 	bl	80001e0 <__aeabi_uldivmod>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4bb8      	ldr	r3, [pc, #736]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002a92:	fba3 2302 	umull	r2, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	469b      	mov	fp, r3
 8002aa0:	f04f 0c00 	mov.w	ip, #0
 8002aa4:	46d9      	mov	r9, fp
 8002aa6:	46e2      	mov	sl, ip
 8002aa8:	eb19 0309 	adds.w	r3, r9, r9
 8002aac:	eb4a 040a 	adc.w	r4, sl, sl
 8002ab0:	4699      	mov	r9, r3
 8002ab2:	46a2      	mov	sl, r4
 8002ab4:	eb19 090b 	adds.w	r9, r9, fp
 8002ab8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ac8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002acc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ad0:	4689      	mov	r9, r1
 8002ad2:	4692      	mov	sl, r2
 8002ad4:	eb1b 0509 	adds.w	r5, fp, r9
 8002ad8:	eb4c 060a 	adc.w	r6, ip, sl
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	f04f 0400 	mov.w	r4, #0
 8002aee:	0094      	lsls	r4, r2, #2
 8002af0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002af4:	008b      	lsls	r3, r1, #2
 8002af6:	461a      	mov	r2, r3
 8002af8:	4623      	mov	r3, r4
 8002afa:	4628      	mov	r0, r5
 8002afc:	4631      	mov	r1, r6
 8002afe:	f7fd fb6f 	bl	80001e0 <__aeabi_uldivmod>
 8002b02:	4603      	mov	r3, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b9a      	ldr	r3, [pc, #616]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2164      	movs	r1, #100	; 0x64
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	3332      	adds	r3, #50	; 0x32
 8002b1c:	4a95      	ldr	r2, [pc, #596]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b28:	4498      	add	r8, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	469b      	mov	fp, r3
 8002b2e:	f04f 0c00 	mov.w	ip, #0
 8002b32:	46d9      	mov	r9, fp
 8002b34:	46e2      	mov	sl, ip
 8002b36:	eb19 0309 	adds.w	r3, r9, r9
 8002b3a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b3e:	4699      	mov	r9, r3
 8002b40:	46a2      	mov	sl, r4
 8002b42:	eb19 090b 	adds.w	r9, r9, fp
 8002b46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b5e:	4689      	mov	r9, r1
 8002b60:	4692      	mov	sl, r2
 8002b62:	eb1b 0509 	adds.w	r5, fp, r9
 8002b66:	eb4c 060a 	adc.w	r6, ip, sl
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	f04f 0400 	mov.w	r4, #0
 8002b7c:	0094      	lsls	r4, r2, #2
 8002b7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b82:	008b      	lsls	r3, r1, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	4628      	mov	r0, r5
 8002b8a:	4631      	mov	r1, r6
 8002b8c:	f7fd fb28 	bl	80001e0 <__aeabi_uldivmod>
 8002b90:	4603      	mov	r3, r0
 8002b92:	460c      	mov	r4, r1
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b77      	ldr	r3, [pc, #476]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002b98:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	2164      	movs	r1, #100	; 0x64
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	3332      	adds	r3, #50	; 0x32
 8002baa:	4a72      	ldr	r2, [pc, #456]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	f003 020f 	and.w	r2, r3, #15
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4442      	add	r2, r8
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	e0d0      	b.n	8002d62 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc0:	f7fe ff56 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002bc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	469a      	mov	sl, r3
 8002bca:	f04f 0b00 	mov.w	fp, #0
 8002bce:	46d0      	mov	r8, sl
 8002bd0:	46d9      	mov	r9, fp
 8002bd2:	eb18 0308 	adds.w	r3, r8, r8
 8002bd6:	eb49 0409 	adc.w	r4, r9, r9
 8002bda:	4698      	mov	r8, r3
 8002bdc:	46a1      	mov	r9, r4
 8002bde:	eb18 080a 	adds.w	r8, r8, sl
 8002be2:	eb49 090b 	adc.w	r9, r9, fp
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bf2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bf6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bfa:	4688      	mov	r8, r1
 8002bfc:	4691      	mov	r9, r2
 8002bfe:	eb1a 0508 	adds.w	r5, sl, r8
 8002c02:	eb4b 0609 	adc.w	r6, fp, r9
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	f04f 0400 	mov.w	r4, #0
 8002c18:	0094      	lsls	r4, r2, #2
 8002c1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c1e:	008b      	lsls	r3, r1, #2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	4628      	mov	r0, r5
 8002c26:	4631      	mov	r1, r6
 8002c28:	f7fd fada 	bl	80001e0 <__aeabi_uldivmod>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002c34:	fba3 2302 	umull	r2, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	469b      	mov	fp, r3
 8002c42:	f04f 0c00 	mov.w	ip, #0
 8002c46:	46d9      	mov	r9, fp
 8002c48:	46e2      	mov	sl, ip
 8002c4a:	eb19 0309 	adds.w	r3, r9, r9
 8002c4e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c52:	4699      	mov	r9, r3
 8002c54:	46a2      	mov	sl, r4
 8002c56:	eb19 090b 	adds.w	r9, r9, fp
 8002c5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c72:	4689      	mov	r9, r1
 8002c74:	4692      	mov	sl, r2
 8002c76:	eb1b 0509 	adds.w	r5, fp, r9
 8002c7a:	eb4c 060a 	adc.w	r6, ip, sl
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4619      	mov	r1, r3
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	f04f 0400 	mov.w	r4, #0
 8002c90:	0094      	lsls	r4, r2, #2
 8002c92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c96:	008b      	lsls	r3, r1, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	4631      	mov	r1, r6
 8002ca0:	f7fd fa9e 	bl	80001e0 <__aeabi_uldivmod>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	460c      	mov	r4, r1
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002cac:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	2164      	movs	r1, #100	; 0x64
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	3332      	adds	r3, #50	; 0x32
 8002cbe:	4a2d      	ldr	r2, [pc, #180]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cca:	4498      	add	r8, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	469b      	mov	fp, r3
 8002cd0:	f04f 0c00 	mov.w	ip, #0
 8002cd4:	46d9      	mov	r9, fp
 8002cd6:	46e2      	mov	sl, ip
 8002cd8:	eb19 0309 	adds.w	r3, r9, r9
 8002cdc:	eb4a 040a 	adc.w	r4, sl, sl
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	46a2      	mov	sl, r4
 8002ce4:	eb19 090b 	adds.w	r9, r9, fp
 8002ce8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d00:	4689      	mov	r9, r1
 8002d02:	4692      	mov	sl, r2
 8002d04:	eb1b 0509 	adds.w	r5, fp, r9
 8002d08:	eb4c 060a 	adc.w	r6, ip, sl
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4619      	mov	r1, r3
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	f04f 0400 	mov.w	r4, #0
 8002d1e:	0094      	lsls	r4, r2, #2
 8002d20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d24:	008b      	lsls	r3, r1, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	4623      	mov	r3, r4
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	4631      	mov	r1, r6
 8002d2e:	f7fd fa57 	bl	80001e0 <__aeabi_uldivmod>
 8002d32:	4603      	mov	r3, r0
 8002d34:	460c      	mov	r4, r1
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2164      	movs	r1, #100	; 0x64
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	3332      	adds	r3, #50	; 0x32
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <UART_SetConfig+0x6f4>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	f003 020f 	and.w	r2, r3, #15
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4442      	add	r2, r8
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	e7ff      	b.n	8002d62 <UART_SetConfig+0x6e2>
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6c:	40011000 	.word	0x40011000
 8002d70:	40011400 	.word	0x40011400
 8002d74:	51eb851f 	.word	0x51eb851f

08002d78 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d7e:	f3ef 8305 	mrs	r3, IPSR
 8002d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8e:	607b      	str	r3, [r7, #4]
  return(result);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <osKernelInitialize+0x32>
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <osKernelInitialize+0x64>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d109      	bne.n	8002db2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8002da2:	603b      	str	r3, [r7, #0]
  return(result);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002daa:	f06f 0305 	mvn.w	r3, #5
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e00c      	b.n	8002dcc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <osKernelInitialize+0x64>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <osKernelInitialize+0x64>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e002      	b.n	8002dcc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000030 	.word	0x20000030

08002de0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002de6:	f3ef 8305 	mrs	r3, IPSR
 8002dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df2:	f3ef 8310 	mrs	r3, PRIMASK
 8002df6:	607b      	str	r3, [r7, #4]
  return(result);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <osKernelStart+0x32>
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <osKernelStart+0x64>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d109      	bne.n	8002e1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e06:	f3ef 8311 	mrs	r3, BASEPRI
 8002e0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e12:	f06f 0305 	mvn.w	r3, #5
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e00e      	b.n	8002e38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <osKernelStart+0x64>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <osKernelStart+0x64>)
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002e28:	f001 fd62 	bl	80048f0 <vTaskStartScheduler>
      stat = osOK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e002      	b.n	8002e38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e38:	68fb      	ldr	r3, [r7, #12]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000030 	.word	0x20000030

08002e48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b092      	sub	sp, #72	; 0x48
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e58:	f3ef 8305 	mrs	r3, IPSR
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 8094 	bne.w	8002f8e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e66:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6a:	623b      	str	r3, [r7, #32]
  return(result);
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 808d 	bne.w	8002f8e <osThreadNew+0x146>
 8002e74:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <osThreadNew+0x150>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d106      	bne.n	8002e8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e80:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 8082 	bne.w	8002f8e <osThreadNew+0x146>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d07e      	beq.n	8002f8e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002e94:	2318      	movs	r3, #24
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002e98:	2300      	movs	r3, #0
 8002e9a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e9c:	f107 031b 	add.w	r3, r7, #27
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d045      	beq.n	8002f3a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <osThreadNew+0x74>
        name = attr->name;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <osThreadNew+0x9a>
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2b38      	cmp	r3, #56	; 0x38
 8002ed4:	d805      	bhi.n	8002ee2 <osThreadNew+0x9a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <osThreadNew+0x9e>
        return (NULL);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e054      	b.n	8002f90 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <osThreadNew+0xd4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b5b      	cmp	r3, #91	; 0x5b
 8002f04:	d90a      	bls.n	8002f1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <osThreadNew+0xd4>
        mem = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1a:	e010      	b.n	8002f3e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10c      	bne.n	8002f3e <osThreadNew+0xf6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d108      	bne.n	8002f3e <osThreadNew+0xf6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <osThreadNew+0xf6>
          mem = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f38:	e001      	b.n	8002f3e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d110      	bne.n	8002f66 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f4c:	9202      	str	r2, [sp, #8]
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f001 fb00 	bl	8004560 <xTaskCreateStatic>
 8002f60:	4603      	mov	r3, r0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e013      	b.n	8002f8e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d110      	bne.n	8002f8e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f001 fb47 	bl	8004612 <xTaskCreate>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d001      	beq.n	8002f8e <osThreadNew+0x146>
          hTask = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f8e:	697b      	ldr	r3, [r7, #20]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3738      	adds	r7, #56	; 0x38
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000030 	.word	0x20000030

08002f9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fa4:	f3ef 8305 	mrs	r3, IPSR
 8002fa8:	613b      	str	r3, [r7, #16]
  return(result);
 8002faa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <osDelay+0x34>
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <osDelay+0x58>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d109      	bne.n	8002fd8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8002fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <osDelay+0x3c>
    stat = osErrorISR;
 8002fd0:	f06f 0305 	mvn.w	r3, #5
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e007      	b.n	8002fe8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f001 fc50 	bl	8004888 <vTaskDelay>
    }
  }

  return (stat);
 8002fe8:	697b      	ldr	r3, [r7, #20]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000030 	.word	0x20000030

08002ff8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003008:	f3ef 8305 	mrs	r3, IPSR
 800300c:	61bb      	str	r3, [r7, #24]
  return(result);
 800300e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003010:	2b00      	cmp	r3, #0
 8003012:	f040 8088 	bne.w	8003126 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003016:	f3ef 8310 	mrs	r3, PRIMASK
 800301a:	617b      	str	r3, [r7, #20]
  return(result);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 8081 	bne.w	8003126 <osSemaphoreNew+0x12e>
 8003024:	4b42      	ldr	r3, [pc, #264]	; (8003130 <osSemaphoreNew+0x138>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d105      	bne.n	8003038 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800302c:	f3ef 8311 	mrs	r3, BASEPRI
 8003030:	613b      	str	r3, [r7, #16]
  return(result);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d176      	bne.n	8003126 <osSemaphoreNew+0x12e>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d073      	beq.n	8003126 <osSemaphoreNew+0x12e>
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	429a      	cmp	r2, r3
 8003044:	d86f      	bhi.n	8003126 <osSemaphoreNew+0x12e>
    mem = -1;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d015      	beq.n	800307e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <osSemaphoreNew+0x70>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b4f      	cmp	r3, #79	; 0x4f
 8003060:	d902      	bls.n	8003068 <osSemaphoreNew+0x70>
        mem = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	e00c      	b.n	8003082 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d108      	bne.n	8003082 <osSemaphoreNew+0x8a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <osSemaphoreNew+0x8a>
          mem = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	623b      	str	r3, [r7, #32]
 800307c:	e001      	b.n	8003082 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d04d      	beq.n	8003126 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d129      	bne.n	80030e4 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d10b      	bne.n	80030ae <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	2303      	movs	r3, #3
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	2001      	movs	r0, #1
 80030a6:	f000 fad9 	bl	800365c <xQueueGenericCreateStatic>
 80030aa:	6278      	str	r0, [r7, #36]	; 0x24
 80030ac:	e005      	b.n	80030ba <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80030ae:	2203      	movs	r2, #3
 80030b0:	2100      	movs	r1, #0
 80030b2:	2001      	movs	r0, #1
 80030b4:	f000 fb44 	bl	8003740 <xQueueGenericCreate>
 80030b8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d022      	beq.n	8003106 <osSemaphoreNew+0x10e>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01f      	beq.n	8003106 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80030c6:	2300      	movs	r3, #0
 80030c8:	2200      	movs	r2, #0
 80030ca:	2100      	movs	r1, #0
 80030cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ce:	f000 fbfd 	bl	80038cc <xQueueGenericSend>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d016      	beq.n	8003106 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 80030d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030da:	f001 f870 	bl	80041be <vQueueDelete>
            hSemaphore = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e010      	b.n	8003106 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d108      	bne.n	80030fc <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fb84 	bl	8003800 <xQueueCreateCountingSemaphoreStatic>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24
 80030fa:	e004      	b.n	8003106 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fbb3 	bl	800386a <xQueueCreateCountingSemaphore>
 8003104:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00c      	beq.n	8003126 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <osSemaphoreNew+0x122>
          name = attr->name;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	e001      	b.n	800311e <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800311e:	69f9      	ldr	r1, [r7, #28]
 8003120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003122:	f001 f997 	bl	8004454 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000030 	.word	0x20000030

08003134 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800314c:	f06f 0303 	mvn.w	r3, #3
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e04b      	b.n	80031ec <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003154:	f3ef 8305 	mrs	r3, IPSR
 8003158:	617b      	str	r3, [r7, #20]
  return(result);
 800315a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003160:	f3ef 8310 	mrs	r3, PRIMASK
 8003164:	613b      	str	r3, [r7, #16]
  return(result);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <osSemaphoreAcquire+0x4c>
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <osSemaphoreAcquire+0xc4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d128      	bne.n	80031c6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003174:	f3ef 8311 	mrs	r3, BASEPRI
 8003178:	60fb      	str	r3, [r7, #12]
  return(result);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d022      	beq.n	80031c6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003186:	f06f 0303 	mvn.w	r3, #3
 800318a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800318c:	e02d      	b.n	80031ea <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	461a      	mov	r2, r3
 8003198:	2100      	movs	r1, #0
 800319a:	69b8      	ldr	r0, [r7, #24]
 800319c:	f000 ff92 	bl	80040c4 <xQueueReceiveFromISR>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d003      	beq.n	80031ae <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80031a6:	f06f 0302 	mvn.w	r3, #2
 80031aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80031ac:	e01d      	b.n	80031ea <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01a      	beq.n	80031ea <osSemaphoreAcquire+0xb6>
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <osSemaphoreAcquire+0xc8>)
 80031b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80031c4:	e011      	b.n	80031ea <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80031c6:	6839      	ldr	r1, [r7, #0]
 80031c8:	69b8      	ldr	r0, [r7, #24]
 80031ca:	f000 fe73 	bl	8003eb4 <xQueueSemaphoreTake>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d00b      	beq.n	80031ec <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80031da:	f06f 0301 	mvn.w	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	e004      	b.n	80031ec <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80031e2:	f06f 0302 	mvn.w	r3, #2
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	e000      	b.n	80031ec <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80031ea:	bf00      	nop
      }
    }
  }

  return (stat);
 80031ec:	69fb      	ldr	r3, [r7, #28]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000030 	.word	0x20000030
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003216:	f06f 0303 	mvn.w	r3, #3
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	e03e      	b.n	800329c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321e:	f3ef 8305 	mrs	r3, IPSR
 8003222:	617b      	str	r3, [r7, #20]
  return(result);
 8003224:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8310 	mrs	r3, PRIMASK
 800322e:	613b      	str	r3, [r7, #16]
  return(result);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <osSemaphoreRelease+0x4a>
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <osSemaphoreRelease+0xa8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d120      	bne.n	8003280 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800323e:	f3ef 8311 	mrs	r3, BASEPRI
 8003242:	60fb      	str	r3, [r7, #12]
  return(result);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01a      	beq.n	8003280 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800324e:	f107 0308 	add.w	r3, r7, #8
 8003252:	4619      	mov	r1, r3
 8003254:	69b8      	ldr	r0, [r7, #24]
 8003256:	f000 fcc7 	bl	8003be8 <xQueueGiveFromISR>
 800325a:	4603      	mov	r3, r0
 800325c:	2b01      	cmp	r3, #1
 800325e:	d003      	beq.n	8003268 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003260:	f06f 0302 	mvn.w	r3, #2
 8003264:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003266:	e018      	b.n	800329a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d015      	beq.n	800329a <osSemaphoreRelease+0x9a>
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <osSemaphoreRelease+0xac>)
 8003270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800327e:	e00c      	b.n	800329a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003280:	2300      	movs	r3, #0
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	69b8      	ldr	r0, [r7, #24]
 8003288:	f000 fb20 	bl	80038cc <xQueueGenericSend>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d004      	beq.n	800329c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003292:	f06f 0302 	mvn.w	r3, #2
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	e000      	b.n	800329c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800329a:	bf00      	nop
    }
  }

  return (stat);
 800329c:	69fb      	ldr	r3, [r7, #28]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000030 	.word	0x20000030
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032c0:	f3ef 8305 	mrs	r3, IPSR
 80032c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80032c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d170      	bne.n	80033ae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032cc:	f3ef 8310 	mrs	r3, PRIMASK
 80032d0:	617b      	str	r3, [r7, #20]
  return(result);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d16a      	bne.n	80033ae <osMessageQueueNew+0xfe>
 80032d8:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <osMessageQueueNew+0x108>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d105      	bne.n	80032ec <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032e0:	f3ef 8311 	mrs	r3, BASEPRI
 80032e4:	613b      	str	r3, [r7, #16]
  return(result);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d160      	bne.n	80033ae <osMessageQueueNew+0xfe>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d05d      	beq.n	80033ae <osMessageQueueNew+0xfe>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d05a      	beq.n	80033ae <osMessageQueueNew+0xfe>
    mem = -1;
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d029      	beq.n	8003358 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d012      	beq.n	8003332 <osMessageQueueNew+0x82>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b4f      	cmp	r3, #79	; 0x4f
 8003312:	d90e      	bls.n	8003332 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	429a      	cmp	r2, r3
 800332a:	d302      	bcc.n	8003332 <osMessageQueueNew+0x82>
        mem = 1;
 800332c:	2301      	movs	r3, #1
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	e014      	b.n	800335c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d110      	bne.n	800335c <osMessageQueueNew+0xac>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d104      	bne.n	800335c <osMessageQueueNew+0xac>
          mem = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
 8003356:	e001      	b.n	800335c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d10c      	bne.n	800337c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6899      	ldr	r1, [r3, #8]
 800336a:	2300      	movs	r3, #0
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	460b      	mov	r3, r1
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f972 	bl	800365c <xQueueGenericCreateStatic>
 8003378:	6278      	str	r0, [r7, #36]	; 0x24
 800337a:	e008      	b.n	800338e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003382:	2200      	movs	r2, #0
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f9da 	bl	8003740 <xQueueGenericCreate>
 800338c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00c      	beq.n	80033ae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	e001      	b.n	80033a6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80033a6:	69f9      	ldr	r1, [r7, #28]
 80033a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033aa:	f001 f853 	bl	8004454 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000030 	.word	0x20000030

080033bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80033cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4a06      	ldr	r2, [pc, #24]	; (80033ec <vApplicationGetIdleTaskMemory+0x30>)
 80033d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	601a      	str	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000034 	.word	0x20000034
 80033ec:	20000090 	.word	0x20000090

080033f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <vApplicationGetTimerTaskMemory+0x2c>)
 8003400:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4a06      	ldr	r2, [pc, #24]	; (8003420 <vApplicationGetTimerTaskMemory+0x30>)
 8003406:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	20000290 	.word	0x20000290
 8003420:	200002ec 	.word	0x200002ec

08003424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f103 0208 	add.w	r2, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f04f 32ff 	mov.w	r2, #4294967295
 800343c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f103 0208 	add.w	r2, r3, #8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f103 0208 	add.w	r2, r3, #8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d103      	bne.n	80034e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e00c      	b.n	8003500 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3308      	adds	r3, #8
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e002      	b.n	80034f4 <vListInsert+0x2e>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d2f6      	bcs.n	80034ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d103      	bne.n	800356c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1e5a      	subs	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	e7fe      	b.n	80035b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80035b4:	f002 fbf2 	bl	8005d9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	68f9      	ldr	r1, [r7, #12]
 80035c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	441a      	add	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	3b01      	subs	r3, #1
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	441a      	add	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	22ff      	movs	r2, #255	; 0xff
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	22ff      	movs	r2, #255	; 0xff
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d114      	bne.n	8003634 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01a      	beq.n	8003648 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3310      	adds	r3, #16
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fbf0 	bl	8004dfc <xTaskRemoveFromEventList>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <xQueueGenericReset+0xcc>)
 8003624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	e009      	b.n	8003648 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3310      	adds	r3, #16
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fef3 	bl	8003424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3324      	adds	r3, #36	; 0x24
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff feee 	bl	8003424 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003648:	f002 fbd6 	bl	8005df8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800364c:	2301      	movs	r3, #1
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08e      	sub	sp, #56	; 0x38
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <xQueueGenericCreateStatic+0x28>
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
 8003682:	e7fe      	b.n	8003682 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <xQueueGenericCreateStatic+0x42>
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
 800369c:	e7fe      	b.n	800369c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <xQueueGenericCreateStatic+0x4e>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <xQueueGenericCreateStatic+0x52>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueGenericCreateStatic+0x54>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <xQueueGenericCreateStatic+0x6c>
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
 80036c6:	e7fe      	b.n	80036c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <xQueueGenericCreateStatic+0x78>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <xQueueGenericCreateStatic+0x7c>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <xQueueGenericCreateStatic+0x7e>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <xQueueGenericCreateStatic+0x96>
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e7fe      	b.n	80036f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036f2:	2350      	movs	r3, #80	; 0x50
 80036f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b50      	cmp	r3, #80	; 0x50
 80036fa:	d009      	beq.n	8003710 <xQueueGenericCreateStatic+0xb4>
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	e7fe      	b.n	800370e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003722:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f842 	bl	80037ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003738:	4618      	mov	r0, r3
 800373a:	3730      	adds	r7, #48	; 0x30
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	4613      	mov	r3, r2
 800374c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <xQueueGenericCreate+0x28>
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e7fe      	b.n	8003766 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e004      	b.n	800377e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3350      	adds	r3, #80	; 0x50
 8003782:	4618      	mov	r0, r3
 8003784:	f002 fc24 	bl	8005fd0 <pvPortMalloc>
 8003788:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00f      	beq.n	80037b0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	3350      	adds	r3, #80	; 0x50
 8003794:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800379e:	79fa      	ldrb	r2, [r7, #7]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f805 	bl	80037ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80037b0:	69bb      	ldr	r3, [r7, #24]
	}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e002      	b.n	80037dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037e8:	2101      	movs	r1, #1
 80037ea:	69b8      	ldr	r0, [r7, #24]
 80037ec:	f7ff fece 	bl	800358c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <xQueueCreateCountingSemaphoreStatic+0x26>
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	e7fe      	b.n	8003824 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	429a      	cmp	r2, r3
 800382c:	d909      	bls.n	8003842 <xQueueCreateCountingSemaphoreStatic+0x42>
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e7fe      	b.n	8003840 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003842:	2302      	movs	r3, #2
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff ff05 	bl	800365c <xQueueGenericCreateStatic>
 8003852:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003860:	69fb      	ldr	r3, [r7, #28]
	}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <xQueueCreateCountingSemaphore+0x24>
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	e7fe      	b.n	800388c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d909      	bls.n	80038aa <xQueueCreateCountingSemaphore+0x40>
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e7fe      	b.n	80038a8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038aa:	2202      	movs	r2, #2
 80038ac:	2100      	movs	r1, #0
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff46 	bl	8003740 <xQueueGenericCreate>
 80038b4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80038c2:	697b      	ldr	r3, [r7, #20]
	}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08e      	sub	sp, #56	; 0x38
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038da:	2300      	movs	r3, #0
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <xQueueGenericSend+0x30>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fa:	e7fe      	b.n	80038fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d103      	bne.n	800390a <xQueueGenericSend+0x3e>
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <xQueueGenericSend+0x42>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <xQueueGenericSend+0x44>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <xQueueGenericSend+0x5c>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
 8003926:	e7fe      	b.n	8003926 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d103      	bne.n	8003936 <xQueueGenericSend+0x6a>
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <xQueueGenericSend+0x6e>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <xQueueGenericSend+0x70>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <xQueueGenericSend+0x88>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	e7fe      	b.n	8003952 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003954:	f001 fc0e 	bl	8005174 <xTaskGetSchedulerState>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <xQueueGenericSend+0x98>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <xQueueGenericSend+0x9c>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <xQueueGenericSend+0x9e>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <xQueueGenericSend+0xb6>
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e7fe      	b.n	8003980 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003982:	f002 fa0b 	bl	8005d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <xQueueGenericSend+0xcc>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d129      	bne.n	80039ec <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399e:	f000 fc48 	bl	8004232 <prvCopyDataToQueue>
 80039a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d010      	beq.n	80039ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	3324      	adds	r3, #36	; 0x24
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 fa23 	bl	8004dfc <xTaskRemoveFromEventList>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d013      	beq.n	80039e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039bc:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <xQueueGenericSend+0x1f0>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	e00a      	b.n	80039e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d007      	beq.n	80039e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <xQueueGenericSend+0x1f0>)
 80039d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039e4:	f002 fa08 	bl	8005df8 <vPortExitCritical>
				return pdPASS;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e063      	b.n	8003ab4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039f2:	f002 fa01 	bl	8005df8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e05c      	b.n	8003ab4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 fa5b 	bl	8004ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a0e:	f002 f9f3 	bl	8005df8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a12:	f000 ffd1 	bl	80049b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a16:	f002 f9c1 	bl	8005d9c <vPortEnterCritical>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a20:	b25b      	sxtb	r3, r3
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d103      	bne.n	8003a30 <xQueueGenericSend+0x164>
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a36:	b25b      	sxtb	r3, r3
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d103      	bne.n	8003a46 <xQueueGenericSend+0x17a>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a46:	f002 f9d7 	bl	8005df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a4a:	1d3a      	adds	r2, r7, #4
 8003a4c:	f107 0314 	add.w	r3, r7, #20
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fa4a 	bl	8004eec <xTaskCheckForTimeOut>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d124      	bne.n	8003aa8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a60:	f000 fcdf 	bl	8004422 <prvIsQueueFull>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	3310      	adds	r3, #16
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f974 	bl	8004d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a7a:	f000 fc6a 	bl	8004352 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a7e:	f000 ffa9 	bl	80049d4 <xTaskResumeAll>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f47f af7c 	bne.w	8003982 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <xQueueGenericSend+0x1f0>)
 8003a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	e772      	b.n	8003982 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a9e:	f000 fc58 	bl	8004352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aa2:	f000 ff97 	bl	80049d4 <xTaskResumeAll>
 8003aa6:	e76c      	b.n	8003982 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aaa:	f000 fc52 	bl	8004352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aae:	f000 ff91 	bl	80049d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ab2:	2300      	movs	r3, #0
		}
	}
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3738      	adds	r7, #56	; 0x38
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08e      	sub	sp, #56	; 0x38
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <xQueueGenericSendFromISR+0x2c>
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	e7fe      	b.n	8003aea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <xQueueGenericSendFromISR+0x3a>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <xQueueGenericSendFromISR+0x3e>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <xQueueGenericSendFromISR+0x40>
 8003afe:	2300      	movs	r3, #0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <xQueueGenericSendFromISR+0x58>
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	623b      	str	r3, [r7, #32]
 8003b16:	e7fe      	b.n	8003b16 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d103      	bne.n	8003b26 <xQueueGenericSendFromISR+0x66>
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <xQueueGenericSendFromISR+0x6a>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueGenericSendFromISR+0x6c>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <xQueueGenericSendFromISR+0x84>
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	e7fe      	b.n	8003b42 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b44:	f002 fa06 	bl	8005f54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b48:	f3ef 8211 	mrs	r2, BASEPRI
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	61ba      	str	r2, [r7, #24]
 8003b5e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <xQueueGenericSendFromISR+0xb6>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d12c      	bne.n	8003bd0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b86:	f000 fb54 	bl	8004232 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d112      	bne.n	8003bba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d016      	beq.n	8003bca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	3324      	adds	r3, #36	; 0x24
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f92b 	bl	8004dfc <xTaskRemoveFromEventList>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00e      	beq.n	8003bca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e007      	b.n	8003bca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	b25a      	sxtb	r2, r3
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003bce:	e001      	b.n	8003bd4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3738      	adds	r7, #56	; 0x38
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08e      	sub	sp, #56	; 0x38
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	e7fe      	b.n	8003c0e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <xQueueGiveFromISR+0x44>
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e7fe      	b.n	8003c2a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <xQueueGiveFromISR+0x54>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <xQueueGiveFromISR+0x58>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <xQueueGiveFromISR+0x5a>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <xQueueGiveFromISR+0x72>
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e7fe      	b.n	8003c58 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c5a:	f002 f97b 	bl	8005f54 <vPortValidateInterruptPriority>
	__asm volatile
 8003c5e:	f3ef 8211 	mrs	r2, BASEPRI
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	617a      	str	r2, [r7, #20]
 8003c74:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003c76:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d22b      	bcs.n	8003ce2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d112      	bne.n	8003ccc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	3324      	adds	r3, #36	; 0x24
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 f8a2 	bl	8004dfc <xTaskRemoveFromEventList>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00e      	beq.n	8003cdc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e007      	b.n	8003cdc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	b25a      	sxtb	r2, r3
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce0:	e001      	b.n	8003ce6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3738      	adds	r7, #56	; 0x38
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	; 0x30
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <xQueueReceive+0x2e>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	623b      	str	r3, [r7, #32]
 8003d28:	e7fe      	b.n	8003d28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <xQueueReceive+0x3c>
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <xQueueReceive+0x40>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <xQueueReceive+0x42>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <xQueueReceive+0x5a>
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	e7fe      	b.n	8003d54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d56:	f001 fa0d 	bl	8005174 <xTaskGetSchedulerState>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <xQueueReceive+0x6a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <xQueueReceive+0x6e>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <xQueueReceive+0x70>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <xQueueReceive+0x88>
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e7fe      	b.n	8003d82 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d84:	f002 f80a 	bl	8005d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01f      	beq.n	8003dd4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d98:	f000 fab5 	bl	8004306 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00f      	beq.n	8003dcc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	3310      	adds	r3, #16
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 f823 	bl	8004dfc <xTaskRemoveFromEventList>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dbc:	4b3c      	ldr	r3, [pc, #240]	; (8003eb0 <xQueueReceive+0x1b4>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dcc:	f002 f814 	bl	8005df8 <vPortExitCritical>
				return pdPASS;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e069      	b.n	8003ea8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dda:	f002 f80d 	bl	8005df8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e062      	b.n	8003ea8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 f867 	bl	8004ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003df6:	f001 ffff 	bl	8005df8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dfa:	f000 fddd 	bl	80049b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dfe:	f001 ffcd 	bl	8005d9c <vPortEnterCritical>
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d103      	bne.n	8003e18 <xQueueReceive+0x11c>
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d103      	bne.n	8003e2e <xQueueReceive+0x132>
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2e:	f001 ffe3 	bl	8005df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e32:	1d3a      	adds	r2, r7, #4
 8003e34:	f107 0310 	add.w	r3, r7, #16
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f856 	bl	8004eec <xTaskCheckForTimeOut>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d123      	bne.n	8003e8e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e48:	f000 fad5 	bl	80043f6 <prvIsQueueEmpty>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d017      	beq.n	8003e82 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	3324      	adds	r3, #36	; 0x24
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 ff80 	bl	8004d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e62:	f000 fa76 	bl	8004352 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e66:	f000 fdb5 	bl	80049d4 <xTaskResumeAll>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d189      	bne.n	8003d84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <xQueueReceive+0x1b4>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	e780      	b.n	8003d84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e84:	f000 fa65 	bl	8004352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e88:	f000 fda4 	bl	80049d4 <xTaskResumeAll>
 8003e8c:	e77a      	b.n	8003d84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e90:	f000 fa5f 	bl	8004352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e94:	f000 fd9e 	bl	80049d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e9a:	f000 faac 	bl	80043f6 <prvIsQueueEmpty>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f43f af6f 	beq.w	8003d84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ea6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3730      	adds	r7, #48	; 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	e000ed04 	.word	0xe000ed04

08003eb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08e      	sub	sp, #56	; 0x38
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <xQueueSemaphoreTake+0x30>
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	e7fe      	b.n	8003ee2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <xQueueSemaphoreTake+0x4c>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e7fe      	b.n	8003efe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f00:	f001 f938 	bl	8005174 <xTaskGetSchedulerState>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <xQueueSemaphoreTake+0x5c>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <xQueueSemaphoreTake+0x60>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <xQueueSemaphoreTake+0x62>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <xQueueSemaphoreTake+0x7a>
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e7fe      	b.n	8003f2c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f2e:	f001 ff35 	bl	8005d9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d024      	beq.n	8003f88 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003f4e:	f001 fa8d 	bl	800546c <pvTaskIncrementMutexHeldCount>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00f      	beq.n	8003f80 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	3310      	adds	r3, #16
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 ff49 	bl	8004dfc <xTaskRemoveFromEventList>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f70:	4b53      	ldr	r3, [pc, #332]	; (80040c0 <xQueueSemaphoreTake+0x20c>)
 8003f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f80:	f001 ff3a 	bl	8005df8 <vPortExitCritical>
				return pdPASS;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e096      	b.n	80040b6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d110      	bne.n	8003fb0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <xQueueSemaphoreTake+0xf4>
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e7fe      	b.n	8003fa6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003fa8:	f001 ff26 	bl	8005df8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e082      	b.n	80040b6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 ff80 	bl	8004ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fc4:	f001 ff18 	bl	8005df8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fc8:	f000 fcf6 	bl	80049b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fcc:	f001 fee6 	bl	8005d9c <vPortEnterCritical>
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd6:	b25b      	sxtb	r3, r3
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d103      	bne.n	8003fe6 <xQueueSemaphoreTake+0x132>
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d103      	bne.n	8003ffc <xQueueSemaphoreTake+0x148>
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ffc:	f001 fefc 	bl	8005df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004000:	463a      	mov	r2, r7
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ff6f 	bl	8004eec <xTaskCheckForTimeOut>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d132      	bne.n	800407a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004016:	f000 f9ee 	bl	80043f6 <prvIsQueueEmpty>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d026      	beq.n	800406e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004028:	f001 feb8 	bl	8005d9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f001 f8bd 	bl	80051b0 <xTaskPriorityInherit>
 8004036:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004038:	f001 fede 	bl	8005df8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	3324      	adds	r3, #36	; 0x24
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fe8b 	bl	8004d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800404a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800404c:	f000 f981 	bl	8004352 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004050:	f000 fcc0 	bl	80049d4 <xTaskResumeAll>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	f47f af69 	bne.w	8003f2e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800405c:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <xQueueSemaphoreTake+0x20c>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	e75f      	b.n	8003f2e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800406e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004070:	f000 f96f 	bl	8004352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004074:	f000 fcae 	bl	80049d4 <xTaskResumeAll>
 8004078:	e759      	b.n	8003f2e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800407a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800407c:	f000 f969 	bl	8004352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004080:	f000 fca8 	bl	80049d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004086:	f000 f9b6 	bl	80043f6 <prvIsQueueEmpty>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	f43f af4e 	beq.w	8003f2e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004098:	f001 fe80 	bl	8005d9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800409c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800409e:	f000 f8b0 	bl	8004202 <prvGetDisinheritPriorityAfterTimeout>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 f95a 	bl	8005364 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80040b0:	f001 fea2 	bl	8005df8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3738      	adds	r7, #56	; 0x38
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	; 0x38
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <xQueueReceiveFromISR+0x2a>
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	e7fe      	b.n	80040ec <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <xQueueReceiveFromISR+0x38>
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <xQueueReceiveFromISR+0x3c>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <xQueueReceiveFromISR+0x3e>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <xQueueReceiveFromISR+0x56>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	e7fe      	b.n	8004118 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800411a:	f001 ff1b 	bl	8005f54 <vPortValidateInterruptPriority>
	__asm volatile
 800411e:	f3ef 8211 	mrs	r2, BASEPRI
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	61ba      	str	r2, [r7, #24]
 8004134:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004136:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d02f      	beq.n	80041a6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800414c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004154:	f000 f8d7 	bl	8004306 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	1e5a      	subs	r2, r3, #1
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d112      	bne.n	8004190 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	3310      	adds	r3, #16
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fe40 	bl	8004dfc <xTaskRemoveFromEventList>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00e      	beq.n	80041a0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e007      	b.n	80041a0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004194:	3301      	adds	r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	b25a      	sxtb	r2, r3
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80041a0:	2301      	movs	r3, #1
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
 80041a4:	e001      	b.n	80041aa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3738      	adds	r7, #56	; 0x38
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <vQueueDelete+0x26>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	e7fe      	b.n	80041e2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f95d 	bl	80044a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f001 ffad 	bl	8006154 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e001      	b.n	8004224 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004224:	68fb      	ldr	r3, [r7, #12]
	}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10d      	bne.n	800426c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d14d      	bne.n	80042f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f815 	bl	800528c <xTaskPriorityDisinherit>
 8004262:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	e043      	b.n	80042f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d119      	bne.n	80042a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6898      	ldr	r0, [r3, #8]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	461a      	mov	r2, r3
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	f002 f8bb 	bl	80063f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	441a      	add	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d32b      	bcc.n	80042f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	e026      	b.n	80042f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68d8      	ldr	r0, [r3, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	461a      	mov	r2, r3
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	f002 f8a1 	bl	80063f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	425b      	negs	r3, r3
 80042c0:	441a      	add	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d207      	bcs.n	80042e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	425b      	negs	r3, r3
 80042dc:	441a      	add	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d105      	bne.n	80042f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80042fc:	697b      	ldr	r3, [r7, #20]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d018      	beq.n	800434a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	429a      	cmp	r2, r3
 8004330:	d303      	bcc.n	800433a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68d9      	ldr	r1, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	461a      	mov	r2, r3
 8004344:	6838      	ldr	r0, [r7, #0]
 8004346:	f002 f857 	bl	80063f8 <memcpy>
	}
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800435a:	f001 fd1f 	bl	8005d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004364:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004366:	e011      	b.n	800438c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3324      	adds	r3, #36	; 0x24
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fd41 	bl	8004dfc <xTaskRemoveFromEventList>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004380:	f000 fe14 	bl	8004fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	3b01      	subs	r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800438c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	dce9      	bgt.n	8004368 <prvUnlockQueue+0x16>
 8004394:	e000      	b.n	8004398 <prvUnlockQueue+0x46>
					break;
 8004396:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	22ff      	movs	r2, #255	; 0xff
 800439c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80043a0:	f001 fd2a 	bl	8005df8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043a4:	f001 fcfa 	bl	8005d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043b0:	e011      	b.n	80043d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d012      	beq.n	80043e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3310      	adds	r3, #16
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fd1c 	bl	8004dfc <xTaskRemoveFromEventList>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043ca:	f000 fdef 	bl	8004fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043ce:	7bbb      	ldrb	r3, [r7, #14]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	dce9      	bgt.n	80043b2 <prvUnlockQueue+0x60>
 80043de:	e000      	b.n	80043e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	22ff      	movs	r2, #255	; 0xff
 80043e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043ea:	f001 fd05 	bl	8005df8 <vPortExitCritical>
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043fe:	f001 fccd 	bl	8005d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e001      	b.n	8004414 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004414:	f001 fcf0 	bl	8005df8 <vPortExitCritical>

	return xReturn;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800442a:	f001 fcb7 	bl	8005d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	429a      	cmp	r2, r3
 8004438:	d102      	bne.n	8004440 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800443a:	2301      	movs	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e001      	b.n	8004444 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004444:	f001 fcd8 	bl	8005df8 <vPortExitCritical>

	return xReturn;
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	e014      	b.n	800448e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004464:	4a0e      	ldr	r2, [pc, #56]	; (80044a0 <vQueueAddToRegistry+0x4c>)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004470:	490b      	ldr	r1, [pc, #44]	; (80044a0 <vQueueAddToRegistry+0x4c>)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800447a:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <vQueueAddToRegistry+0x4c>)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004486:	e005      	b.n	8004494 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b07      	cmp	r3, #7
 8004492:	d9e7      	bls.n	8004464 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	200049d0 	.word	0x200049d0

080044a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e016      	b.n	80044e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80044b2:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <vQueueUnregisterQueue+0x50>)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d10b      	bne.n	80044da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80044c2:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <vQueueUnregisterQueue+0x50>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2100      	movs	r1, #0
 80044c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80044cc:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <vQueueUnregisterQueue+0x50>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	2200      	movs	r2, #0
 80044d6:	605a      	str	r2, [r3, #4]
				break;
 80044d8:	e005      	b.n	80044e6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b07      	cmp	r3, #7
 80044e4:	d9e5      	bls.n	80044b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	200049d0 	.word	0x200049d0

080044f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004508:	f001 fc48 	bl	8005d9c <vPortEnterCritical>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004512:	b25b      	sxtb	r3, r3
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d103      	bne.n	8004522 <vQueueWaitForMessageRestricted+0x2a>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004528:	b25b      	sxtb	r3, r3
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d103      	bne.n	8004538 <vQueueWaitForMessageRestricted+0x40>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004538:	f001 fc5e 	bl	8005df8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3324      	adds	r3, #36	; 0x24
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fc2b 	bl	8004da8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f7ff fefd 	bl	8004352 <prvUnlockQueue>
	}
 8004558:	bf00      	nop
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08e      	sub	sp, #56	; 0x38
 8004564:	af04      	add	r7, sp, #16
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <xTaskCreateStatic+0x28>
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	623b      	str	r3, [r7, #32]
 8004586:	e7fe      	b.n	8004586 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <xTaskCreateStatic+0x42>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	e7fe      	b.n	80045a0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045a2:	235c      	movs	r3, #92	; 0x5c
 80045a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b5c      	cmp	r3, #92	; 0x5c
 80045aa:	d009      	beq.n	80045c0 <xTaskCreateStatic+0x60>
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	e7fe      	b.n	80045be <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01e      	beq.n	8004604 <xTaskCreateStatic+0xa4>
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01b      	beq.n	8004604 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045de:	2300      	movs	r3, #0
 80045e0:	9303      	str	r3, [sp, #12]
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	9302      	str	r3, [sp, #8]
 80045e6:	f107 0314 	add.w	r3, r7, #20
 80045ea:	9301      	str	r3, [sp, #4]
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f850 	bl	800469c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045fe:	f000 f8d3 	bl	80047a8 <prvAddNewTaskToReadyList>
 8004602:	e001      	b.n	8004608 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004608:	697b      	ldr	r3, [r7, #20]
	}
 800460a:	4618      	mov	r0, r3
 800460c:	3728      	adds	r7, #40	; 0x28
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08c      	sub	sp, #48	; 0x30
 8004616:	af04      	add	r7, sp, #16
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4618      	mov	r0, r3
 8004628:	f001 fcd2 	bl	8005fd0 <pvPortMalloc>
 800462c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00e      	beq.n	8004652 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004634:	205c      	movs	r0, #92	; 0x5c
 8004636:	f001 fccb 	bl	8005fd0 <pvPortMalloc>
 800463a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
 8004648:	e005      	b.n	8004656 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	f001 fd82 	bl	8006154 <vPortFree>
 8004650:	e001      	b.n	8004656 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	2300      	movs	r3, #0
 8004668:	9303      	str	r3, [sp, #12]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	9302      	str	r3, [sp, #8]
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f80e 	bl	800469c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004680:	69f8      	ldr	r0, [r7, #28]
 8004682:	f000 f891 	bl	80047a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004686:	2301      	movs	r3, #1
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e002      	b.n	8004692 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295
 8004690:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004692:	69bb      	ldr	r3, [r7, #24]
	}
 8004694:	4618      	mov	r0, r3
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	461a      	mov	r2, r3
 80046b4:	21a5      	movs	r1, #165	; 0xa5
 80046b6:	f001 feaa 	bl	800640e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046c4:	3b01      	subs	r3, #1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f023 0307 	bic.w	r3, r3, #7
 80046d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <prvInitialiseNewTask+0x56>
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e7fe      	b.n	80046f0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	e012      	b.n	800471e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	7819      	ldrb	r1, [r3, #0]
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	3334      	adds	r3, #52	; 0x34
 8004708:	460a      	mov	r2, r1
 800470a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b0f      	cmp	r3, #15
 8004722:	d9e9      	bls.n	80046f8 <prvInitialiseNewTask+0x5c>
 8004724:	e000      	b.n	8004728 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004726:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	2b37      	cmp	r3, #55	; 0x37
 8004734:	d901      	bls.n	800473a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004736:	2337      	movs	r3, #55	; 0x37
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004744:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2200      	movs	r2, #0
 800474a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fe87 	bl	8003464 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	3318      	adds	r3, #24
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fe82 	bl	8003464 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004764:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004774:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	2200      	movs	r2, #0
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	69b8      	ldr	r0, [r7, #24]
 800478a:	f001 f9e1 	bl	8005b50 <pxPortInitialiseStack>
 800478e:	4602      	mov	r2, r0
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047a0:	bf00      	nop
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047b0:	f001 faf4 	bl	8005d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047b4:	4b2d      	ldr	r3, [pc, #180]	; (800486c <prvAddNewTaskToReadyList+0xc4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	4a2c      	ldr	r2, [pc, #176]	; (800486c <prvAddNewTaskToReadyList+0xc4>)
 80047bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047be:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <prvAddNewTaskToReadyList+0xc8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047c6:	4a2a      	ldr	r2, [pc, #168]	; (8004870 <prvAddNewTaskToReadyList+0xc8>)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047cc:	4b27      	ldr	r3, [pc, #156]	; (800486c <prvAddNewTaskToReadyList+0xc4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d110      	bne.n	80047f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047d4:	f000 fc0e 	bl	8004ff4 <prvInitialiseTaskLists>
 80047d8:	e00d      	b.n	80047f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047da:	4b26      	ldr	r3, [pc, #152]	; (8004874 <prvAddNewTaskToReadyList+0xcc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <prvAddNewTaskToReadyList+0xc8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d802      	bhi.n	80047f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047f0:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <prvAddNewTaskToReadyList+0xc8>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <prvAddNewTaskToReadyList+0xd0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <prvAddNewTaskToReadyList+0xd0>)
 80047fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004800:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <prvAddNewTaskToReadyList+0xd0>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	4b1b      	ldr	r3, [pc, #108]	; (800487c <prvAddNewTaskToReadyList+0xd4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d903      	bls.n	800481c <prvAddNewTaskToReadyList+0x74>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4a18      	ldr	r2, [pc, #96]	; (800487c <prvAddNewTaskToReadyList+0xd4>)
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <prvAddNewTaskToReadyList+0xd8>)
 800482a:	441a      	add	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7fe fe23 	bl	800347e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004838:	f001 fade 	bl	8005df8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800483c:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <prvAddNewTaskToReadyList+0xcc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00e      	beq.n	8004862 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <prvAddNewTaskToReadyList+0xc8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	429a      	cmp	r2, r3
 8004850:	d207      	bcs.n	8004862 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <prvAddNewTaskToReadyList+0xdc>)
 8004854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000bc0 	.word	0x20000bc0
 8004870:	200006ec 	.word	0x200006ec
 8004874:	20000bcc 	.word	0x20000bcc
 8004878:	20000bdc 	.word	0x20000bdc
 800487c:	20000bc8 	.word	0x20000bc8
 8004880:	200006f0 	.word	0x200006f0
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <vTaskDelay+0x60>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <vTaskDelay+0x2e>
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	e7fe      	b.n	80048b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80048b6:	f000 f87f 	bl	80049b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048ba:	2100      	movs	r1, #0
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fde9 	bl	8005494 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048c2:	f000 f887 	bl	80049d4 <xTaskResumeAll>
 80048c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <vTaskDelay+0x64>)
 80048d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000be8 	.word	0x20000be8
 80048ec:	e000ed04 	.word	0xe000ed04

080048f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048fe:	463a      	mov	r2, r7
 8004900:	1d39      	adds	r1, r7, #4
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fd58 	bl	80033bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	9202      	str	r2, [sp, #8]
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	2300      	movs	r3, #0
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	460a      	mov	r2, r1
 800491e:	4920      	ldr	r1, [pc, #128]	; (80049a0 <vTaskStartScheduler+0xb0>)
 8004920:	4820      	ldr	r0, [pc, #128]	; (80049a4 <vTaskStartScheduler+0xb4>)
 8004922:	f7ff fe1d 	bl	8004560 <xTaskCreateStatic>
 8004926:	4602      	mov	r2, r0
 8004928:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <vTaskStartScheduler+0xb8>)
 800492a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <vTaskStartScheduler+0xb8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004934:	2301      	movs	r3, #1
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e001      	b.n	800493e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d102      	bne.n	800494a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004944:	f000 fdfa 	bl	800553c <xTimerCreateTimerTask>
 8004948:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d115      	bne.n	800497c <vTaskStartScheduler+0x8c>
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <vTaskStartScheduler+0xbc>)
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <vTaskStartScheduler+0xc0>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004970:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <vTaskStartScheduler+0xc4>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004976:	f001 f973 	bl	8005c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800497a:	e00d      	b.n	8004998 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d109      	bne.n	8004998 <vTaskStartScheduler+0xa8>
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e7fe      	b.n	8004996 <vTaskStartScheduler+0xa6>
}
 8004998:	bf00      	nop
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	08006510 	.word	0x08006510
 80049a4:	08004fc5 	.word	0x08004fc5
 80049a8:	20000be4 	.word	0x20000be4
 80049ac:	20000be0 	.word	0x20000be0
 80049b0:	20000bcc 	.word	0x20000bcc
 80049b4:	20000bc4 	.word	0x20000bc4

080049b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <vTaskSuspendAll+0x18>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	4a03      	ldr	r2, [pc, #12]	; (80049d0 <vTaskSuspendAll+0x18>)
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	bf00      	nop
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	20000be8 	.word	0x20000be8

080049d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049e2:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <xTaskResumeAll+0x114>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <xTaskResumeAll+0x2a>
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	e7fe      	b.n	80049fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049fe:	f001 f9cd 	bl	8005d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <xTaskResumeAll+0x114>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	4a37      	ldr	r2, [pc, #220]	; (8004ae8 <xTaskResumeAll+0x114>)
 8004a0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a0c:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <xTaskResumeAll+0x114>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d162      	bne.n	8004ada <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a14:	4b35      	ldr	r3, [pc, #212]	; (8004aec <xTaskResumeAll+0x118>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d05e      	beq.n	8004ada <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a1c:	e02f      	b.n	8004a7e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a1e:	4b34      	ldr	r3, [pc, #208]	; (8004af0 <xTaskResumeAll+0x11c>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3318      	adds	r3, #24
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fd84 	bl	8003538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe fd7f 	bl	8003538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3e:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <xTaskResumeAll+0x120>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d903      	bls.n	8004a4e <xTaskResumeAll+0x7a>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <xTaskResumeAll+0x120>)
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <xTaskResumeAll+0x124>)
 8004a5c:	441a      	add	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7fe fd0a 	bl	800347e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <xTaskResumeAll+0x128>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d302      	bcc.n	8004a7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a78:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <xTaskResumeAll+0x12c>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a7e:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <xTaskResumeAll+0x11c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1cb      	bne.n	8004a1e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a8c:	f000 fb4c 	bl	8005128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a90:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <xTaskResumeAll+0x130>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d010      	beq.n	8004abe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a9c:	f000 f846 	bl	8004b2c <xTaskIncrementTick>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004aa6:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <xTaskResumeAll+0x12c>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f1      	bne.n	8004a9c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004ab8:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <xTaskResumeAll+0x130>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <xTaskResumeAll+0x12c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aca:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <xTaskResumeAll+0x134>)
 8004acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ada:	f001 f98d 	bl	8005df8 <vPortExitCritical>

	return xAlreadyYielded;
 8004ade:	68bb      	ldr	r3, [r7, #8]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000be8 	.word	0x20000be8
 8004aec:	20000bc0 	.word	0x20000bc0
 8004af0:	20000b80 	.word	0x20000b80
 8004af4:	20000bc8 	.word	0x20000bc8
 8004af8:	200006f0 	.word	0x200006f0
 8004afc:	200006ec 	.word	0x200006ec
 8004b00:	20000bd4 	.word	0x20000bd4
 8004b04:	20000bd0 	.word	0x20000bd0
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b12:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <xTaskGetTickCount+0x1c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b18:	687b      	ldr	r3, [r7, #4]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000bc4 	.word	0x20000bc4

08004b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b36:	4b51      	ldr	r3, [pc, #324]	; (8004c7c <xTaskIncrementTick+0x150>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 808d 	bne.w	8004c5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b40:	4b4f      	ldr	r3, [pc, #316]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b48:	4a4d      	ldr	r2, [pc, #308]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11f      	bne.n	8004b94 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b54:	4b4b      	ldr	r3, [pc, #300]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <xTaskIncrementTick+0x46>
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	e7fe      	b.n	8004b70 <xTaskIncrementTick+0x44>
 8004b72:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <xTaskIncrementTick+0x15c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a41      	ldr	r2, [pc, #260]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4a41      	ldr	r2, [pc, #260]	; (8004c88 <xTaskIncrementTick+0x15c>)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <xTaskIncrementTick+0x160>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <xTaskIncrementTick+0x160>)
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	f000 faca 	bl	8005128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b94:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <xTaskIncrementTick+0x164>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d34e      	bcc.n	8004c3c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b9e:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <xTaskIncrementTick+0x80>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <xTaskIncrementTick+0x82>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb2:	4b37      	ldr	r3, [pc, #220]	; (8004c90 <xTaskIncrementTick+0x164>)
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	601a      	str	r2, [r3, #0]
					break;
 8004bba:	e03f      	b.n	8004c3c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bbc:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d203      	bcs.n	8004bdc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bd4:	4a2e      	ldr	r2, [pc, #184]	; (8004c90 <xTaskIncrementTick+0x164>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6013      	str	r3, [r2, #0]
						break;
 8004bda:	e02f      	b.n	8004c3c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe fca9 	bl	8003538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d004      	beq.n	8004bf8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fca0 	bl	8003538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfc:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <xTaskIncrementTick+0x168>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d903      	bls.n	8004c0c <xTaskIncrementTick+0xe0>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <xTaskIncrementTick+0x168>)
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4a1f      	ldr	r2, [pc, #124]	; (8004c98 <xTaskIncrementTick+0x16c>)
 8004c1a:	441a      	add	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f7fe fc2b 	bl	800347e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <xTaskIncrementTick+0x170>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d3b3      	bcc.n	8004b9e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004c36:	2301      	movs	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c3a:	e7b0      	b.n	8004b9e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c3c:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <xTaskIncrementTick+0x170>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c42:	4915      	ldr	r1, [pc, #84]	; (8004c98 <xTaskIncrementTick+0x16c>)
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d907      	bls.n	8004c64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e004      	b.n	8004c64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <xTaskIncrementTick+0x174>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	4a0f      	ldr	r2, [pc, #60]	; (8004ca0 <xTaskIncrementTick+0x174>)
 8004c62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <xTaskIncrementTick+0x178>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c70:	697b      	ldr	r3, [r7, #20]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000be8 	.word	0x20000be8
 8004c80:	20000bc4 	.word	0x20000bc4
 8004c84:	20000b78 	.word	0x20000b78
 8004c88:	20000b7c 	.word	0x20000b7c
 8004c8c:	20000bd8 	.word	0x20000bd8
 8004c90:	20000be0 	.word	0x20000be0
 8004c94:	20000bc8 	.word	0x20000bc8
 8004c98:	200006f0 	.word	0x200006f0
 8004c9c:	200006ec 	.word	0x200006ec
 8004ca0:	20000bd0 	.word	0x20000bd0
 8004ca4:	20000bd4 	.word	0x20000bd4

08004ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cae:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <vTaskSwitchContext+0xa4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cb6:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <vTaskSwitchContext+0xa8>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cbc:	e040      	b.n	8004d40 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <vTaskSwitchContext+0xa8>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004cc4:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <vTaskSwitchContext+0xac>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e00f      	b.n	8004cec <vTaskSwitchContext+0x44>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <vTaskSwitchContext+0x3e>
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	e7fe      	b.n	8004ce4 <vTaskSwitchContext+0x3c>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	491a      	ldr	r1, [pc, #104]	; (8004d58 <vTaskSwitchContext+0xb0>)
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0e5      	beq.n	8004ccc <vTaskSwitchContext+0x24>
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <vTaskSwitchContext+0xb0>)
 8004d0c:	4413      	add	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	3308      	adds	r3, #8
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d104      	bne.n	8004d30 <vTaskSwitchContext+0x88>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	605a      	str	r2, [r3, #4]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <vTaskSwitchContext+0xb4>)
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <vTaskSwitchContext+0xac>)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6013      	str	r3, [r2, #0]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20000be8 	.word	0x20000be8
 8004d50:	20000bd4 	.word	0x20000bd4
 8004d54:	20000bc8 	.word	0x20000bc8
 8004d58:	200006f0 	.word	0x200006f0
 8004d5c:	200006ec 	.word	0x200006ec

08004d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <vTaskPlaceOnEventList+0x24>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e7fe      	b.n	8004d82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <vTaskPlaceOnEventList+0x44>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3318      	adds	r3, #24
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fe fb9a 	bl	80034c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d92:	2101      	movs	r1, #1
 8004d94:	6838      	ldr	r0, [r7, #0]
 8004d96:	f000 fb7d 	bl	8005494 <prvAddCurrentTaskToDelayedList>
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200006ec 	.word	0x200006ec

08004da8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <vTaskPlaceOnEventListRestricted+0x26>
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e7fe      	b.n	8004dcc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <vTaskPlaceOnEventListRestricted+0x50>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7fe fb51 	bl	800347e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004de2:	f04f 33ff 	mov.w	r3, #4294967295
 8004de6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	68b8      	ldr	r0, [r7, #8]
 8004dec:	f000 fb52 	bl	8005494 <prvAddCurrentTaskToDelayedList>
	}
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	200006ec 	.word	0x200006ec

08004dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <xTaskRemoveFromEventList+0x2a>
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e7fe      	b.n	8004e24 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3318      	adds	r3, #24
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fb84 	bl	8003538 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e30:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <xTaskRemoveFromEventList+0xac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11d      	bne.n	8004e74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe fb7b 	bl	8003538 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <xTaskRemoveFromEventList+0xb0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d903      	bls.n	8004e56 <xTaskRemoveFromEventList+0x5a>
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <xTaskRemoveFromEventList+0xb0>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <xTaskRemoveFromEventList+0xb4>)
 8004e64:	441a      	add	r2, r3
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f7fe fb06 	bl	800347e <vListInsertEnd>
 8004e72:	e005      	b.n	8004e80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3318      	adds	r3, #24
 8004e78:	4619      	mov	r1, r3
 8004e7a:	480e      	ldr	r0, [pc, #56]	; (8004eb4 <xTaskRemoveFromEventList+0xb8>)
 8004e7c:	f7fe faff 	bl	800347e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <xTaskRemoveFromEventList+0xbc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d905      	bls.n	8004e9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <xTaskRemoveFromEventList+0xc0>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e001      	b.n	8004e9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000be8 	.word	0x20000be8
 8004eac:	20000bc8 	.word	0x20000bc8
 8004eb0:	200006f0 	.word	0x200006f0
 8004eb4:	20000b80 	.word	0x20000b80
 8004eb8:	200006ec 	.word	0x200006ec
 8004ebc:	20000bd4 	.word	0x20000bd4

08004ec0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <vTaskInternalSetTimeOutState+0x24>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <vTaskInternalSetTimeOutState+0x28>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	605a      	str	r2, [r3, #4]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	20000bd8 	.word	0x20000bd8
 8004ee8:	20000bc4 	.word	0x20000bc4

08004eec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <xTaskCheckForTimeOut+0x24>
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e7fe      	b.n	8004f0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <xTaskCheckForTimeOut+0x3e>
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e7fe      	b.n	8004f28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004f2a:	f000 ff37 	bl	8005d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <xTaskCheckForTimeOut+0xb8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d102      	bne.n	8004f4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e023      	b.n	8004f96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <xTaskCheckForTimeOut+0xbc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d007      	beq.n	8004f6a <xTaskCheckForTimeOut+0x7e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f64:	2301      	movs	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e015      	b.n	8004f96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d20b      	bcs.n	8004f8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ff9d 	bl	8004ec0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e004      	b.n	8004f96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f96:	f000 ff2f 	bl	8005df8 <vPortExitCritical>

	return xReturn;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000bc4 	.word	0x20000bc4
 8004fa8:	20000bd8 	.word	0x20000bd8

08004fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <vTaskMissedYield+0x14>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	20000bd4 	.word	0x20000bd4

08004fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fcc:	f000 f852 	bl	8005074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <prvIdleTask+0x28>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d9f9      	bls.n	8004fcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <prvIdleTask+0x2c>)
 8004fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fe8:	e7f0      	b.n	8004fcc <prvIdleTask+0x8>
 8004fea:	bf00      	nop
 8004fec:	200006f0 	.word	0x200006f0
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	e00c      	b.n	800501a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <prvInitialiseTaskLists+0x60>)
 800500c:	4413      	add	r3, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe fa08 	bl	8003424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3301      	adds	r3, #1
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b37      	cmp	r3, #55	; 0x37
 800501e:	d9ef      	bls.n	8005000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005020:	480d      	ldr	r0, [pc, #52]	; (8005058 <prvInitialiseTaskLists+0x64>)
 8005022:	f7fe f9ff 	bl	8003424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005026:	480d      	ldr	r0, [pc, #52]	; (800505c <prvInitialiseTaskLists+0x68>)
 8005028:	f7fe f9fc 	bl	8003424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800502c:	480c      	ldr	r0, [pc, #48]	; (8005060 <prvInitialiseTaskLists+0x6c>)
 800502e:	f7fe f9f9 	bl	8003424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005032:	480c      	ldr	r0, [pc, #48]	; (8005064 <prvInitialiseTaskLists+0x70>)
 8005034:	f7fe f9f6 	bl	8003424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005038:	480b      	ldr	r0, [pc, #44]	; (8005068 <prvInitialiseTaskLists+0x74>)
 800503a:	f7fe f9f3 	bl	8003424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <prvInitialiseTaskLists+0x78>)
 8005040:	4a05      	ldr	r2, [pc, #20]	; (8005058 <prvInitialiseTaskLists+0x64>)
 8005042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <prvInitialiseTaskLists+0x7c>)
 8005046:	4a05      	ldr	r2, [pc, #20]	; (800505c <prvInitialiseTaskLists+0x68>)
 8005048:	601a      	str	r2, [r3, #0]
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200006f0 	.word	0x200006f0
 8005058:	20000b50 	.word	0x20000b50
 800505c:	20000b64 	.word	0x20000b64
 8005060:	20000b80 	.word	0x20000b80
 8005064:	20000b94 	.word	0x20000b94
 8005068:	20000bac 	.word	0x20000bac
 800506c:	20000b78 	.word	0x20000b78
 8005070:	20000b7c 	.word	0x20000b7c

08005074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800507a:	e019      	b.n	80050b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800507c:	f000 fe8e 	bl	8005d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <prvCheckTasksWaitingTermination+0x4c>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe fa53 	bl	8003538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <prvCheckTasksWaitingTermination+0x50>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3b01      	subs	r3, #1
 8005098:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <prvCheckTasksWaitingTermination+0x50>)
 800509a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvCheckTasksWaitingTermination+0x54>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <prvCheckTasksWaitingTermination+0x54>)
 80050a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050a6:	f000 fea7 	bl	8005df8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f80e 	bl	80050cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <prvCheckTasksWaitingTermination+0x54>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e1      	bne.n	800507c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000b94 	.word	0x20000b94
 80050c4:	20000bc0 	.word	0x20000bc0
 80050c8:	20000ba8 	.word	0x20000ba8

080050cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d108      	bne.n	80050f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 f836 	bl	8006154 <vPortFree>
				vPortFree( pxTCB );
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f001 f833 	bl	8006154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050ee:	e017      	b.n	8005120 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d103      	bne.n	8005102 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 f82a 	bl	8006154 <vPortFree>
	}
 8005100:	e00e      	b.n	8005120 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005108:	2b02      	cmp	r3, #2
 800510a:	d009      	beq.n	8005120 <prvDeleteTCB+0x54>
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e7fe      	b.n	800511e <prvDeleteTCB+0x52>
	}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <prvResetNextTaskUnblockTime+0x44>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <prvResetNextTaskUnblockTime+0x14>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <prvResetNextTaskUnblockTime+0x16>
 800513c:	2300      	movs	r3, #0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <prvResetNextTaskUnblockTime+0x48>)
 8005144:	f04f 32ff 	mov.w	r2, #4294967295
 8005148:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800514a:	e008      	b.n	800515e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <prvResetNextTaskUnblockTime+0x44>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4a05      	ldr	r2, [pc, #20]	; (8005170 <prvResetNextTaskUnblockTime+0x48>)
 800515c:	6013      	str	r3, [r2, #0]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	20000b78 	.word	0x20000b78
 8005170:	20000be0 	.word	0x20000be0

08005174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <xTaskGetSchedulerState+0x34>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005182:	2301      	movs	r3, #1
 8005184:	607b      	str	r3, [r7, #4]
 8005186:	e008      	b.n	800519a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005188:	4b08      	ldr	r3, [pc, #32]	; (80051ac <xTaskGetSchedulerState+0x38>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005190:	2302      	movs	r3, #2
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	e001      	b.n	800519a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800519a:	687b      	ldr	r3, [r7, #4]
	}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	20000bcc 	.word	0x20000bcc
 80051ac:	20000be8 	.word	0x20000be8

080051b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d056      	beq.n	8005274 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ca:	4b2d      	ldr	r3, [pc, #180]	; (8005280 <xTaskPriorityInherit+0xd0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d246      	bcs.n	8005262 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	db06      	blt.n	80051ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051dc:	4b28      	ldr	r3, [pc, #160]	; (8005280 <xTaskPriorityInherit+0xd0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6959      	ldr	r1, [r3, #20]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4a22      	ldr	r2, [pc, #136]	; (8005284 <xTaskPriorityInherit+0xd4>)
 80051fc:	4413      	add	r3, r2
 80051fe:	4299      	cmp	r1, r3
 8005200:	d101      	bne.n	8005206 <xTaskPriorityInherit+0x56>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <xTaskPriorityInherit+0x58>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d022      	beq.n	8005252 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	3304      	adds	r3, #4
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe f991 	bl	8003538 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005216:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <xTaskPriorityInherit+0xd0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b18      	ldr	r3, [pc, #96]	; (8005288 <xTaskPriorityInherit+0xd8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d903      	bls.n	8005234 <xTaskPriorityInherit+0x84>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a15      	ldr	r2, [pc, #84]	; (8005288 <xTaskPriorityInherit+0xd8>)
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4a10      	ldr	r2, [pc, #64]	; (8005284 <xTaskPriorityInherit+0xd4>)
 8005242:	441a      	add	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f7fe f917 	bl	800347e <vListInsertEnd>
 8005250:	e004      	b.n	800525c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <xTaskPriorityInherit+0xd0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800525c:	2301      	movs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e008      	b.n	8005274 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <xTaskPriorityInherit+0xd0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	429a      	cmp	r2, r3
 800526e:	d201      	bcs.n	8005274 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005270:	2301      	movs	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005274:	68fb      	ldr	r3, [r7, #12]
	}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	200006ec 	.word	0x200006ec
 8005284:	200006f0 	.word	0x200006f0
 8005288:	20000bc8 	.word	0x20000bc8

0800528c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d054      	beq.n	800534c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052a2:	4b2d      	ldr	r3, [pc, #180]	; (8005358 <xTaskPriorityDisinherit+0xcc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d009      	beq.n	80052c0 <xTaskPriorityDisinherit+0x34>
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e7fe      	b.n	80052be <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <xTaskPriorityDisinherit+0x50>
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	e7fe      	b.n	80052da <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d02c      	beq.n	800534c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d128      	bne.n	800534c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe f91a 	bl	8003538 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	4b0f      	ldr	r3, [pc, #60]	; (800535c <xTaskPriorityDisinherit+0xd0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d903      	bls.n	800532c <xTaskPriorityDisinherit+0xa0>
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4a0c      	ldr	r2, [pc, #48]	; (800535c <xTaskPriorityDisinherit+0xd0>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4a09      	ldr	r2, [pc, #36]	; (8005360 <xTaskPriorityDisinherit+0xd4>)
 800533a:	441a      	add	r2, r3
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7fe f89b 	bl	800347e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800534c:	697b      	ldr	r3, [r7, #20]
	}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	200006ec 	.word	0x200006ec
 800535c:	20000bc8 	.word	0x20000bc8
 8005360:	200006f0 	.word	0x200006f0

08005364 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005372:	2301      	movs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d06d      	beq.n	8005458 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	e7fe      	b.n	8005396 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d902      	bls.n	80053a8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e002      	b.n	80053ae <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d04f      	beq.n	8005458 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d14a      	bne.n	8005458 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80053c2:	4b27      	ldr	r3, [pc, #156]	; (8005460 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d109      	bne.n	80053e0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	e7fe      	b.n	80053de <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db04      	blt.n	80053fe <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	6959      	ldr	r1, [r3, #20]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800540e:	4413      	add	r3, r2
 8005410:	4299      	cmp	r1, r3
 8005412:	d101      	bne.n	8005418 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01c      	beq.n	8005458 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	3304      	adds	r3, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe f888 	bl	8003538 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d903      	bls.n	800543c <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	4a0b      	ldr	r2, [pc, #44]	; (8005468 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4a06      	ldr	r2, [pc, #24]	; (8005464 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800544a:	441a      	add	r2, r3
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f7fe f813 	bl	800347e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005458:	bf00      	nop
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200006ec 	.word	0x200006ec
 8005464:	200006f0 	.word	0x200006f0
 8005468:	20000bc8 	.word	0x20000bc8

0800546c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <pvTaskIncrementMutexHeldCount+0x24>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <pvTaskIncrementMutexHeldCount+0x24>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800547e:	3201      	adds	r2, #1
 8005480:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005482:	4b03      	ldr	r3, [pc, #12]	; (8005490 <pvTaskIncrementMutexHeldCount+0x24>)
 8005484:	681b      	ldr	r3, [r3, #0]
	}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	200006ec 	.word	0x200006ec

08005494 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800549e:	4b21      	ldr	r3, [pc, #132]	; (8005524 <prvAddCurrentTaskToDelayedList+0x90>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3304      	adds	r3, #4
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe f844 	bl	8003538 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d10a      	bne.n	80054ce <prvAddCurrentTaskToDelayedList+0x3a>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054be:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4619      	mov	r1, r3
 80054c6:	4819      	ldr	r0, [pc, #100]	; (800552c <prvAddCurrentTaskToDelayedList+0x98>)
 80054c8:	f7fd ffd9 	bl	800347e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054cc:	e026      	b.n	800551c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4413      	add	r3, r2
 80054d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <prvAddCurrentTaskToDelayedList+0x94>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d209      	bcs.n	80054fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e6:	4b12      	ldr	r3, [pc, #72]	; (8005530 <prvAddCurrentTaskToDelayedList+0x9c>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <prvAddCurrentTaskToDelayedList+0x94>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7fd ffe7 	bl	80034c6 <vListInsert>
}
 80054f8:	e010      	b.n	800551c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054fa:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <prvAddCurrentTaskToDelayedList+0x94>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f7fd ffdd 	bl	80034c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <prvAddCurrentTaskToDelayedList+0xa4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	d202      	bcs.n	800551c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005516:	4a08      	ldr	r2, [pc, #32]	; (8005538 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6013      	str	r3, [r2, #0]
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000bc4 	.word	0x20000bc4
 8005528:	200006ec 	.word	0x200006ec
 800552c:	20000bac 	.word	0x20000bac
 8005530:	20000b7c 	.word	0x20000b7c
 8005534:	20000b78 	.word	0x20000b78
 8005538:	20000be0 	.word	0x20000be0

0800553c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005546:	f000 fac3 	bl	8005ad0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800554a:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <xTimerCreateTimerTask+0x80>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d021      	beq.n	8005596 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800555a:	1d3a      	adds	r2, r7, #4
 800555c:	f107 0108 	add.w	r1, r7, #8
 8005560:	f107 030c 	add.w	r3, r7, #12
 8005564:	4618      	mov	r0, r3
 8005566:	f7fd ff43 	bl	80033f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	9202      	str	r2, [sp, #8]
 8005572:	9301      	str	r3, [sp, #4]
 8005574:	2302      	movs	r3, #2
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	460a      	mov	r2, r1
 800557c:	4910      	ldr	r1, [pc, #64]	; (80055c0 <xTimerCreateTimerTask+0x84>)
 800557e:	4811      	ldr	r0, [pc, #68]	; (80055c4 <xTimerCreateTimerTask+0x88>)
 8005580:	f7fe ffee 	bl	8004560 <xTaskCreateStatic>
 8005584:	4602      	mov	r2, r0
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <xTimerCreateTimerTask+0x8c>)
 8005588:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800558a:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <xTimerCreateTimerTask+0x8c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005592:	2301      	movs	r3, #1
 8005594:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <xTimerCreateTimerTask+0x74>
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	e7fe      	b.n	80055ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 80055b0:	697b      	ldr	r3, [r7, #20]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000c1c 	.word	0x20000c1c
 80055c0:	08006518 	.word	0x08006518
 80055c4:	080056e5 	.word	0x080056e5
 80055c8:	20000c20 	.word	0x20000c20

080055cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <xTimerGenericCommand+0x2c>
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	623b      	str	r3, [r7, #32]
 80055f6:	e7fe      	b.n	80055f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055f8:	4b19      	ldr	r3, [pc, #100]	; (8005660 <xTimerGenericCommand+0x94>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02a      	beq.n	8005656 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b05      	cmp	r3, #5
 8005610:	dc18      	bgt.n	8005644 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005612:	f7ff fdaf 	bl	8005174 <xTaskGetSchedulerState>
 8005616:	4603      	mov	r3, r0
 8005618:	2b02      	cmp	r3, #2
 800561a:	d109      	bne.n	8005630 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800561c:	4b10      	ldr	r3, [pc, #64]	; (8005660 <xTimerGenericCommand+0x94>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	f107 0110 	add.w	r1, r7, #16
 8005624:	2300      	movs	r3, #0
 8005626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005628:	f7fe f950 	bl	80038cc <xQueueGenericSend>
 800562c:	6278      	str	r0, [r7, #36]	; 0x24
 800562e:	e012      	b.n	8005656 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <xTimerGenericCommand+0x94>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	f107 0110 	add.w	r1, r7, #16
 8005638:	2300      	movs	r3, #0
 800563a:	2200      	movs	r2, #0
 800563c:	f7fe f946 	bl	80038cc <xQueueGenericSend>
 8005640:	6278      	str	r0, [r7, #36]	; 0x24
 8005642:	e008      	b.n	8005656 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <xTimerGenericCommand+0x94>)
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	f107 0110 	add.w	r1, r7, #16
 800564c:	2300      	movs	r3, #0
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	f7fe fa36 	bl	8003ac0 <xQueueGenericSendFromISR>
 8005654:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005658:	4618      	mov	r0, r3
 800565a:	3728      	adds	r7, #40	; 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000c1c 	.word	0x20000c1c

08005664 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800566e:	4b1c      	ldr	r3, [pc, #112]	; (80056e0 <prvProcessExpiredTimer+0x7c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	3304      	adds	r3, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f7fd ff5b 	bl	8003538 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d121      	bne.n	80056ce <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	18d1      	adds	r1, r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f000 f8c8 	bl	800582c <prvInsertTimerInActiveList>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d015      	beq.n	80056ce <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a2:	2300      	movs	r3, #0
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	2300      	movs	r3, #0
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	2100      	movs	r1, #0
 80056ac:	6978      	ldr	r0, [r7, #20]
 80056ae:	f7ff ff8d 	bl	80055cc <xTimerGenericCommand>
 80056b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d109      	bne.n	80056ce <prvProcessExpiredTimer+0x6a>
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e7fe      	b.n	80056cc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	6978      	ldr	r0, [r7, #20]
 80056d4:	4798      	blx	r3
}
 80056d6:	bf00      	nop
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000c14 	.word	0x20000c14

080056e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056ec:	f107 0308 	add.w	r3, r7, #8
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f857 	bl	80057a4 <prvGetNextExpireTime>
 80056f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4619      	mov	r1, r3
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f803 	bl	8005708 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005702:	f000 f8d5 	bl	80058b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005706:	e7f1      	b.n	80056ec <prvTimerTask+0x8>

08005708 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005712:	f7ff f951 	bl	80049b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005716:	f107 0308 	add.w	r3, r7, #8
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f866 	bl	80057ec <prvSampleTimeNow>
 8005720:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d130      	bne.n	800578a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <prvProcessTimerOrBlockTask+0x3c>
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	429a      	cmp	r2, r3
 8005734:	d806      	bhi.n	8005744 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005736:	f7ff f94d 	bl	80049d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff ff91 	bl	8005664 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005742:	e024      	b.n	800578e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <prvProcessTimerOrBlockTask+0x90>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800575c:	4b0f      	ldr	r3, [pc, #60]	; (800579c <prvProcessTimerOrBlockTask+0x94>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	4619      	mov	r1, r3
 800576a:	f7fe fec5 	bl	80044f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800576e:	f7ff f931 	bl	80049d4 <xTaskResumeAll>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <prvProcessTimerOrBlockTask+0x98>)
 800577a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	f3bf 8f6f 	isb	sy
}
 8005788:	e001      	b.n	800578e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800578a:	f7ff f923 	bl	80049d4 <xTaskResumeAll>
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000c18 	.word	0x20000c18
 800579c:	20000c1c 	.word	0x20000c1c
 80057a0:	e000ed04 	.word	0xe000ed04

080057a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057ac:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <prvGetNextExpireTime+0x44>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d105      	bne.n	80057d6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <prvGetNextExpireTime+0x44>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e001      	b.n	80057da <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	20000c14 	.word	0x20000c14

080057ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057f4:	f7ff f98a 	bl	8004b0c <xTaskGetTickCount>
 80057f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <prvSampleTimeNow+0x3c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	429a      	cmp	r2, r3
 8005802:	d205      	bcs.n	8005810 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005804:	f000 f904 	bl	8005a10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	e002      	b.n	8005816 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005816:	4a04      	ldr	r2, [pc, #16]	; (8005828 <prvSampleTimeNow+0x3c>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800581c:	68fb      	ldr	r3, [r7, #12]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000c24 	.word	0x20000c24

0800582c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d812      	bhi.n	8005878 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	1ad2      	subs	r2, r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d302      	bcc.n	8005866 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005860:	2301      	movs	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e01b      	b.n	800589e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005866:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <prvInsertTimerInActiveList+0x7c>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3304      	adds	r3, #4
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f7fd fe28 	bl	80034c6 <vListInsert>
 8005876:	e012      	b.n	800589e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d206      	bcs.n	800588e <prvInsertTimerInActiveList+0x62>
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e007      	b.n	800589e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800588e:	4b07      	ldr	r3, [pc, #28]	; (80058ac <prvInsertTimerInActiveList+0x80>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3304      	adds	r3, #4
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f7fd fe14 	bl	80034c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800589e:	697b      	ldr	r3, [r7, #20]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000c18 	.word	0x20000c18
 80058ac:	20000c14 	.word	0x20000c14

080058b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08e      	sub	sp, #56	; 0x38
 80058b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058b6:	e099      	b.n	80059ec <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da17      	bge.n	80058ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	3304      	adds	r3, #4
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <prvProcessReceivedCommands+0x2e>
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e7fe      	b.n	80058dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e4:	6850      	ldr	r0, [r2, #4]
 80058e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e8:	6892      	ldr	r2, [r2, #8]
 80058ea:	4611      	mov	r1, r2
 80058ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db7a      	blt.n	80059ea <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	3304      	adds	r3, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f7fd fe17 	bl	8003538 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800590a:	463b      	mov	r3, r7
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff ff6d 	bl	80057ec <prvSampleTimeNow>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b09      	cmp	r3, #9
 8005918:	d868      	bhi.n	80059ec <prvProcessReceivedCommands+0x13c>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <prvProcessReceivedCommands+0x70>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005949 	.word	0x08005949
 8005924:	08005949 	.word	0x08005949
 8005928:	08005949 	.word	0x08005949
 800592c:	080059ed 	.word	0x080059ed
 8005930:	080059a3 	.word	0x080059a3
 8005934:	080059d9 	.word	0x080059d9
 8005938:	08005949 	.word	0x08005949
 800593c:	08005949 	.word	0x08005949
 8005940:	080059ed 	.word	0x080059ed
 8005944:	080059a3 	.word	0x080059a3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	18d1      	adds	r1, r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005956:	f7ff ff69 	bl	800582c <prvInsertTimerInActiveList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d045      	beq.n	80059ec <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005966:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d13d      	bne.n	80059ec <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	441a      	add	r2, r3
 8005978:	2300      	movs	r3, #0
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	2300      	movs	r3, #0
 800597e:	2100      	movs	r1, #0
 8005980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005982:	f7ff fe23 	bl	80055cc <xTimerGenericCommand>
 8005986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d12e      	bne.n	80059ec <prvProcessReceivedCommands+0x13c>
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	61bb      	str	r3, [r7, #24]
 80059a0:	e7fe      	b.n	80059a0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <prvProcessReceivedCommands+0x114>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e7fe      	b.n	80059c2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	18d1      	adds	r1, r2, r3
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d2:	f7ff ff2b 	bl	800582c <prvInsertTimerInActiveList>
					break;
 80059d6:	e009      	b.n	80059ec <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80059e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e4:	f000 fbb6 	bl	8006154 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059e8:	e000      	b.n	80059ec <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ec:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <prvProcessReceivedCommands+0x15c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	1d39      	adds	r1, r7, #4
 80059f2:	2200      	movs	r2, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe f981 	bl	8003cfc <xQueueReceive>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f47f af5b 	bne.w	80058b8 <prvProcessReceivedCommands+0x8>
	}
}
 8005a02:	bf00      	nop
 8005a04:	3730      	adds	r7, #48	; 0x30
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000c1c 	.word	0x20000c1c

08005a10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a16:	e044      	b.n	8005aa2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a18:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <prvSwitchTimerLists+0xb8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a22:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <prvSwitchTimerLists+0xb8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fd fd81 	bl	8003538 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d12d      	bne.n	8005aa2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d90e      	bls.n	8005a76 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <prvSwitchTimerLists+0xb8>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fd fd29 	bl	80034c6 <vListInsert>
 8005a74:	e015      	b.n	8005aa2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a76:	2300      	movs	r3, #0
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff fda3 	bl	80055cc <xTimerGenericCommand>
 8005a86:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <prvSwitchTimerLists+0x92>
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	e7fe      	b.n	8005aa0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aa2:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <prvSwitchTimerLists+0xb8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1b5      	bne.n	8005a18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <prvSwitchTimerLists+0xb8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <prvSwitchTimerLists+0xbc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a04      	ldr	r2, [pc, #16]	; (8005ac8 <prvSwitchTimerLists+0xb8>)
 8005ab8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005aba:	4a04      	ldr	r2, [pc, #16]	; (8005acc <prvSwitchTimerLists+0xbc>)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	6013      	str	r3, [r2, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000c14 	.word	0x20000c14
 8005acc:	20000c18 	.word	0x20000c18

08005ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ad6:	f000 f961 	bl	8005d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <prvCheckForValidListAndQueue+0x60>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d120      	bne.n	8005b24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ae2:	4814      	ldr	r0, [pc, #80]	; (8005b34 <prvCheckForValidListAndQueue+0x64>)
 8005ae4:	f7fd fc9e 	bl	8003424 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ae8:	4813      	ldr	r0, [pc, #76]	; (8005b38 <prvCheckForValidListAndQueue+0x68>)
 8005aea:	f7fd fc9b 	bl	8003424 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <prvCheckForValidListAndQueue+0x6c>)
 8005af0:	4a10      	ldr	r2, [pc, #64]	; (8005b34 <prvCheckForValidListAndQueue+0x64>)
 8005af2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005af4:	4b12      	ldr	r3, [pc, #72]	; (8005b40 <prvCheckForValidListAndQueue+0x70>)
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <prvCheckForValidListAndQueue+0x68>)
 8005af8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005afa:	2300      	movs	r3, #0
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <prvCheckForValidListAndQueue+0x74>)
 8005b00:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <prvCheckForValidListAndQueue+0x78>)
 8005b02:	2110      	movs	r1, #16
 8005b04:	200a      	movs	r0, #10
 8005b06:	f7fd fda9 	bl	800365c <xQueueGenericCreateStatic>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <prvCheckForValidListAndQueue+0x60>)
 8005b0e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <prvCheckForValidListAndQueue+0x60>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <prvCheckForValidListAndQueue+0x60>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	490b      	ldr	r1, [pc, #44]	; (8005b4c <prvCheckForValidListAndQueue+0x7c>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fc98 	bl	8004454 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b24:	f000 f968 	bl	8005df8 <vPortExitCritical>
}
 8005b28:	bf00      	nop
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000c1c 	.word	0x20000c1c
 8005b34:	20000bec 	.word	0x20000bec
 8005b38:	20000c00 	.word	0x20000c00
 8005b3c:	20000c14 	.word	0x20000c14
 8005b40:	20000c18 	.word	0x20000c18
 8005b44:	20000cc8 	.word	0x20000cc8
 8005b48:	20000c28 	.word	0x20000c28
 8005b4c:	08006520 	.word	0x08006520

08005b50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3b04      	subs	r3, #4
 8005b60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3b04      	subs	r3, #4
 8005b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f023 0201 	bic.w	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3b04      	subs	r3, #4
 8005b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b80:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <pxPortInitialiseStack+0x64>)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3b14      	subs	r3, #20
 8005b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b04      	subs	r3, #4
 8005b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f06f 0202 	mvn.w	r2, #2
 8005b9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3b20      	subs	r3, #32
 8005ba4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	08005bb9 	.word	0x08005bb9

08005bb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <prvTaskExitError+0x50>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d009      	beq.n	8005be0 <prvTaskExitError+0x28>
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e7fe      	b.n	8005bde <prvTaskExitError+0x26>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bf2:	bf00      	nop
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0fc      	beq.n	8005bf4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000010 	.word	0x20000010
 8005c0c:	00000000 	.word	0x00000000

08005c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <pxCurrentTCBConst2>)
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	f380 8809 	msr	PSP, r0
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	4770      	bx	lr
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst2>:
 8005c30:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c38:	4808      	ldr	r0, [pc, #32]	; (8005c5c <prvPortStartFirstTask+0x24>)
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	6800      	ldr	r0, [r0, #0]
 8005c3e:	f380 8808 	msr	MSP, r0
 8005c42:	f04f 0000 	mov.w	r0, #0
 8005c46:	f380 8814 	msr	CONTROL, r0
 8005c4a:	b662      	cpsie	i
 8005c4c:	b661      	cpsie	f
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	df00      	svc	0
 8005c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed08 	.word	0xe000ed08

08005c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c66:	4b44      	ldr	r3, [pc, #272]	; (8005d78 <xPortStartScheduler+0x118>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a44      	ldr	r2, [pc, #272]	; (8005d7c <xPortStartScheduler+0x11c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d109      	bne.n	8005c84 <xPortStartScheduler+0x24>
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	e7fe      	b.n	8005c82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c84:	4b3c      	ldr	r3, [pc, #240]	; (8005d78 <xPortStartScheduler+0x118>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a3d      	ldr	r2, [pc, #244]	; (8005d80 <xPortStartScheduler+0x120>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d109      	bne.n	8005ca2 <xPortStartScheduler+0x42>
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e7fe      	b.n	8005ca0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ca2:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <xPortStartScheduler+0x124>)
 8005ca4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	4b30      	ldr	r3, [pc, #192]	; (8005d88 <xPortStartScheduler+0x128>)
 8005cc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cca:	4b30      	ldr	r3, [pc, #192]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005ccc:	2207      	movs	r2, #7
 8005cce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cd0:	e009      	b.n	8005ce6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005cda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cee:	2b80      	cmp	r3, #128	; 0x80
 8005cf0:	d0ef      	beq.n	8005cd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cf2:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1c3 0307 	rsb	r3, r3, #7
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d009      	beq.n	8005d12 <xPortStartScheduler+0xb2>
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	e7fe      	b.n	8005d10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d12:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	4a1c      	ldr	r2, [pc, #112]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005d1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d24:	4a19      	ldr	r2, [pc, #100]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005d26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d30:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <xPortStartScheduler+0x130>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <xPortStartScheduler+0x130>)
 8005d36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d3c:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <xPortStartScheduler+0x130>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <xPortStartScheduler+0x130>)
 8005d42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d48:	f000 f8d6 	bl	8005ef8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d52:	f000 f8f5 	bl	8005f40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d56:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a0f      	ldr	r2, [pc, #60]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d62:	f7ff ff69 	bl	8005c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d66:	f7fe ff9f 	bl	8004ca8 <vTaskSwitchContext>
	prvTaskExitError();
 8005d6a:	f7ff ff25 	bl	8005bb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	e000ed00 	.word	0xe000ed00
 8005d7c:	410fc271 	.word	0x410fc271
 8005d80:	410fc270 	.word	0x410fc270
 8005d84:	e000e400 	.word	0xe000e400
 8005d88:	20000d18 	.word	0x20000d18
 8005d8c:	20000d1c 	.word	0x20000d1c
 8005d90:	e000ed20 	.word	0xe000ed20
 8005d94:	20000010 	.word	0x20000010
 8005d98:	e000ef34 	.word	0xe000ef34

08005d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <vPortEnterCritical+0x54>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	4a0d      	ldr	r2, [pc, #52]	; (8005df0 <vPortEnterCritical+0x54>)
 8005dbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <vPortEnterCritical+0x54>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10e      	bne.n	8005de4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <vPortEnterCritical+0x58>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <vPortEnterCritical+0x48>
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	e7fe      	b.n	8005de2 <vPortEnterCritical+0x46>
	}
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	20000010 	.word	0x20000010
 8005df4:	e000ed04 	.word	0xe000ed04

08005df8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dfe:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <vPortExitCritical+0x4c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <vPortExitCritical+0x22>
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	e7fe      	b.n	8005e18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <vPortExitCritical+0x4c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <vPortExitCritical+0x4c>)
 8005e22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e24:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <vPortExitCritical+0x4c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <vPortExitCritical+0x3e>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000010 	.word	0x20000010
	...

08005e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e50:	f3ef 8009 	mrs	r0, PSP
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <pxCurrentTCBConst>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	f01e 0f10 	tst.w	lr, #16
 8005e60:	bf08      	it	eq
 8005e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6a:	6010      	str	r0, [r2, #0]
 8005e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e74:	f380 8811 	msr	BASEPRI, r0
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f7fe ff12 	bl	8004ca8 <vTaskSwitchContext>
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f380 8811 	msr	BASEPRI, r0
 8005e8c:	bc09      	pop	{r0, r3}
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	6808      	ldr	r0, [r1, #0]
 8005e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e96:	f01e 0f10 	tst.w	lr, #16
 8005e9a:	bf08      	it	eq
 8005e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ea0:	f380 8809 	msr	PSP, r0
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	f3af 8000 	nop.w

08005eb0 <pxCurrentTCBConst>:
 8005eb0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop

08005eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ed0:	f7fe fe2c 	bl	8004b2c <xTaskIncrementTick>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <SysTick_Handler+0x3c>)
 8005edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <vPortSetupTimerInterrupt+0x34>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <vPortSetupTimerInterrupt+0x38>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <vPortSetupTimerInterrupt+0x3c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <vPortSetupTimerInterrupt+0x40>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	099b      	lsrs	r3, r3, #6
 8005f14:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <vPortSetupTimerInterrupt+0x44>)
 8005f16:	3b01      	subs	r3, #1
 8005f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f1a:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <vPortSetupTimerInterrupt+0x34>)
 8005f1c:	2207      	movs	r2, #7
 8005f1e:	601a      	str	r2, [r3, #0]
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000e010 	.word	0xe000e010
 8005f30:	e000e018 	.word	0xe000e018
 8005f34:	20000004 	.word	0x20000004
 8005f38:	10624dd3 	.word	0x10624dd3
 8005f3c:	e000e014 	.word	0xe000e014

08005f40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f50 <vPortEnableVFP+0x10>
 8005f44:	6801      	ldr	r1, [r0, #0]
 8005f46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f4a:	6001      	str	r1, [r0, #0]
 8005f4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f4e:	bf00      	nop
 8005f50:	e000ed88 	.word	0xe000ed88

08005f54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f5a:	f3ef 8305 	mrs	r3, IPSR
 8005f5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b0f      	cmp	r3, #15
 8005f64:	d913      	bls.n	8005f8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <vPortValidateInterruptPriority+0x6c>)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <vPortValidateInterruptPriority+0x70>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	7afa      	ldrb	r2, [r7, #11]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d209      	bcs.n	8005f8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	607b      	str	r3, [r7, #4]
 8005f8c:	e7fe      	b.n	8005f8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f8e:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <vPortValidateInterruptPriority+0x74>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <vPortValidateInterruptPriority+0x78>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d909      	bls.n	8005fb2 <vPortValidateInterruptPriority+0x5e>
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	e7fe      	b.n	8005fb0 <vPortValidateInterruptPriority+0x5c>
	}
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000e3f0 	.word	0xe000e3f0
 8005fc4:	20000d18 	.word	0x20000d18
 8005fc8:	e000ed0c 	.word	0xe000ed0c
 8005fcc:	20000d1c 	.word	0x20000d1c

08005fd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	; 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fdc:	f7fe fcec 	bl	80049b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fe0:	4b57      	ldr	r3, [pc, #348]	; (8006140 <pvPortMalloc+0x170>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fe8:	f000 f90c 	bl	8006204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fec:	4b55      	ldr	r3, [pc, #340]	; (8006144 <pvPortMalloc+0x174>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 808c 	bne.w	8006112 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01c      	beq.n	800603a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006000:	2208      	movs	r2, #8
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4413      	add	r3, r2
 8006006:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b00      	cmp	r3, #0
 8006010:	d013      	beq.n	800603a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f023 0307 	bic.w	r3, r3, #7
 8006018:	3308      	adds	r3, #8
 800601a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <pvPortMalloc+0x6a>
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e7fe      	b.n	8006038 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d068      	beq.n	8006112 <pvPortMalloc+0x142>
 8006040:	4b41      	ldr	r3, [pc, #260]	; (8006148 <pvPortMalloc+0x178>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	429a      	cmp	r2, r3
 8006048:	d863      	bhi.n	8006112 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800604a:	4b40      	ldr	r3, [pc, #256]	; (800614c <pvPortMalloc+0x17c>)
 800604c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800604e:	4b3f      	ldr	r3, [pc, #252]	; (800614c <pvPortMalloc+0x17c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006054:	e004      	b.n	8006060 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d903      	bls.n	8006072 <pvPortMalloc+0xa2>
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f1      	bne.n	8006056 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006072:	4b33      	ldr	r3, [pc, #204]	; (8006140 <pvPortMalloc+0x170>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006078:	429a      	cmp	r2, r3
 800607a:	d04a      	beq.n	8006112 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2208      	movs	r2, #8
 8006082:	4413      	add	r3, r2
 8006084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	1ad2      	subs	r2, r2, r3
 8006096:	2308      	movs	r3, #8
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	429a      	cmp	r2, r3
 800609c:	d91e      	bls.n	80060dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800609e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4413      	add	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <pvPortMalloc+0xf4>
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	e7fe      	b.n	80060c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060d6:	69b8      	ldr	r0, [r7, #24]
 80060d8:	f000 f8f6 	bl	80062c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060dc:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <pvPortMalloc+0x178>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	4a18      	ldr	r2, [pc, #96]	; (8006148 <pvPortMalloc+0x178>)
 80060e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060ea:	4b17      	ldr	r3, [pc, #92]	; (8006148 <pvPortMalloc+0x178>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b18      	ldr	r3, [pc, #96]	; (8006150 <pvPortMalloc+0x180>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d203      	bcs.n	80060fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <pvPortMalloc+0x178>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a15      	ldr	r2, [pc, #84]	; (8006150 <pvPortMalloc+0x180>)
 80060fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	4b10      	ldr	r3, [pc, #64]	; (8006144 <pvPortMalloc+0x174>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	431a      	orrs	r2, r3
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006112:	f7fe fc5f 	bl	80049d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <pvPortMalloc+0x164>
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e7fe      	b.n	8006132 <pvPortMalloc+0x162>
	return pvReturn;
 8006134:	69fb      	ldr	r3, [r7, #28]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20004928 	.word	0x20004928
 8006144:	20004934 	.word	0x20004934
 8006148:	2000492c 	.word	0x2000492c
 800614c:	20004920 	.word	0x20004920
 8006150:	20004930 	.word	0x20004930

08006154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d046      	beq.n	80061f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006166:	2308      	movs	r3, #8
 8006168:	425b      	negs	r3, r3
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4413      	add	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	4b20      	ldr	r3, [pc, #128]	; (80061fc <vPortFree+0xa8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <vPortFree+0x42>
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e7fe      	b.n	8006194 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <vPortFree+0x5e>
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	e7fe      	b.n	80061b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b11      	ldr	r3, [pc, #68]	; (80061fc <vPortFree+0xa8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d019      	beq.n	80061f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d115      	bne.n	80061f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <vPortFree+0xa8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061d8:	f7fe fbee 	bl	80049b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <vPortFree+0xac>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	4a06      	ldr	r2, [pc, #24]	; (8006200 <vPortFree+0xac>)
 80061e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ea:	6938      	ldr	r0, [r7, #16]
 80061ec:	f000 f86c 	bl	80062c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061f0:	f7fe fbf0 	bl	80049d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061f4:	bf00      	nop
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20004934 	.word	0x20004934
 8006200:	2000492c 	.word	0x2000492c

08006204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800620a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800620e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006210:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <prvHeapInit+0xac>)
 8006212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00c      	beq.n	8006238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3307      	adds	r3, #7
 8006222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0307 	bic.w	r3, r3, #7
 800622a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <prvHeapInit+0xac>)
 8006234:	4413      	add	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800623c:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <prvHeapInit+0xb0>)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006242:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <prvHeapInit+0xb0>)
 8006244:	2200      	movs	r2, #0
 8006246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006250:	2208      	movs	r2, #8
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0307 	bic.w	r3, r3, #7
 800625e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <prvHeapInit+0xb4>)
 8006264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006266:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <prvHeapInit+0xb4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <prvHeapInit+0xb4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <prvHeapInit+0xb4>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <prvHeapInit+0xb8>)
 8006292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <prvHeapInit+0xbc>)
 800629a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800629c:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <prvHeapInit+0xc0>)
 800629e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062a2:	601a      	str	r2, [r3, #0]
}
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	20000d20 	.word	0x20000d20
 80062b4:	20004920 	.word	0x20004920
 80062b8:	20004928 	.word	0x20004928
 80062bc:	20004930 	.word	0x20004930
 80062c0:	2000492c 	.word	0x2000492c
 80062c4:	20004934 	.word	0x20004934

080062c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062d0:	4b28      	ldr	r3, [pc, #160]	; (8006374 <prvInsertBlockIntoFreeList+0xac>)
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e002      	b.n	80062dc <prvInsertBlockIntoFreeList+0x14>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d8f7      	bhi.n	80062d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4413      	add	r3, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d108      	bne.n	800630a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	441a      	add	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	441a      	add	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d118      	bne.n	8006350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b15      	ldr	r3, [pc, #84]	; (8006378 <prvInsertBlockIntoFreeList+0xb0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d00d      	beq.n	8006346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	441a      	add	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	e008      	b.n	8006358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006346:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <prvInsertBlockIntoFreeList+0xb0>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e003      	b.n	8006358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d002      	beq.n	8006366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20004920 	.word	0x20004920
 8006378:	20004928 	.word	0x20004928

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4e0d      	ldr	r6, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1ba4      	subs	r4, r4, r6
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2500      	movs	r5, #0
 8006388:	42a5      	cmp	r5, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4e0b      	ldr	r6, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f884 	bl	800649c <_init>
 8006394:	1ba4      	subs	r4, r4, r6
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2500      	movs	r5, #0
 800639a:	42a5      	cmp	r5, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a4:	4798      	blx	r3
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ae:	4798      	blx	r3
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08006570 	.word	0x08006570
 80063b8:	08006570 	.word	0x08006570
 80063bc:	08006570 	.word	0x08006570
 80063c0:	08006574 	.word	0x08006574

080063c4 <__itoa>:
 80063c4:	1e93      	subs	r3, r2, #2
 80063c6:	2b22      	cmp	r3, #34	; 0x22
 80063c8:	b510      	push	{r4, lr}
 80063ca:	460c      	mov	r4, r1
 80063cc:	d904      	bls.n	80063d8 <__itoa+0x14>
 80063ce:	2300      	movs	r3, #0
 80063d0:	700b      	strb	r3, [r1, #0]
 80063d2:	461c      	mov	r4, r3
 80063d4:	4620      	mov	r0, r4
 80063d6:	bd10      	pop	{r4, pc}
 80063d8:	2a0a      	cmp	r2, #10
 80063da:	d109      	bne.n	80063f0 <__itoa+0x2c>
 80063dc:	2800      	cmp	r0, #0
 80063de:	da07      	bge.n	80063f0 <__itoa+0x2c>
 80063e0:	232d      	movs	r3, #45	; 0x2d
 80063e2:	700b      	strb	r3, [r1, #0]
 80063e4:	4240      	negs	r0, r0
 80063e6:	2101      	movs	r1, #1
 80063e8:	4421      	add	r1, r4
 80063ea:	f000 f819 	bl	8006420 <__utoa>
 80063ee:	e7f1      	b.n	80063d4 <__itoa+0x10>
 80063f0:	2100      	movs	r1, #0
 80063f2:	e7f9      	b.n	80063e8 <__itoa+0x24>

080063f4 <itoa>:
 80063f4:	f7ff bfe6 	b.w	80063c4 <__itoa>

080063f8 <memcpy>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	1e43      	subs	r3, r0, #1
 80063fc:	440a      	add	r2, r1
 80063fe:	4291      	cmp	r1, r2
 8006400:	d100      	bne.n	8006404 <memcpy+0xc>
 8006402:	bd10      	pop	{r4, pc}
 8006404:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800640c:	e7f7      	b.n	80063fe <memcpy+0x6>

0800640e <memset>:
 800640e:	4402      	add	r2, r0
 8006410:	4603      	mov	r3, r0
 8006412:	4293      	cmp	r3, r2
 8006414:	d100      	bne.n	8006418 <memset+0xa>
 8006416:	4770      	bx	lr
 8006418:	f803 1b01 	strb.w	r1, [r3], #1
 800641c:	e7f9      	b.n	8006412 <memset+0x4>
	...

08006420 <__utoa>:
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <__utoa+0x78>)
 8006424:	b08b      	sub	sp, #44	; 0x2c
 8006426:	4605      	mov	r5, r0
 8006428:	460c      	mov	r4, r1
 800642a:	466e      	mov	r6, sp
 800642c:	f103 0c20 	add.w	ip, r3, #32
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	4637      	mov	r7, r6
 8006436:	c703      	stmia	r7!, {r0, r1}
 8006438:	3308      	adds	r3, #8
 800643a:	4563      	cmp	r3, ip
 800643c:	463e      	mov	r6, r7
 800643e:	d1f7      	bne.n	8006430 <__utoa+0x10>
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	791b      	ldrb	r3, [r3, #4]
 8006444:	713b      	strb	r3, [r7, #4]
 8006446:	1e93      	subs	r3, r2, #2
 8006448:	2b22      	cmp	r3, #34	; 0x22
 800644a:	6038      	str	r0, [r7, #0]
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	d904      	bls.n	800645c <__utoa+0x3c>
 8006452:	7023      	strb	r3, [r4, #0]
 8006454:	461c      	mov	r4, r3
 8006456:	4620      	mov	r0, r4
 8006458:	b00b      	add	sp, #44	; 0x2c
 800645a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800645c:	1e66      	subs	r6, r4, #1
 800645e:	fbb5 f0f2 	udiv	r0, r5, r2
 8006462:	af0a      	add	r7, sp, #40	; 0x28
 8006464:	fb02 5510 	mls	r5, r2, r0, r5
 8006468:	443d      	add	r5, r7
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8006470:	f806 5f01 	strb.w	r5, [r6, #1]!
 8006474:	4605      	mov	r5, r0
 8006476:	b968      	cbnz	r0, 8006494 <__utoa+0x74>
 8006478:	5460      	strb	r0, [r4, r1]
 800647a:	4423      	add	r3, r4
 800647c:	4622      	mov	r2, r4
 800647e:	1b19      	subs	r1, r3, r4
 8006480:	1b10      	subs	r0, r2, r4
 8006482:	4281      	cmp	r1, r0
 8006484:	dde7      	ble.n	8006456 <__utoa+0x36>
 8006486:	7811      	ldrb	r1, [r2, #0]
 8006488:	7818      	ldrb	r0, [r3, #0]
 800648a:	f802 0b01 	strb.w	r0, [r2], #1
 800648e:	f803 1901 	strb.w	r1, [r3], #-1
 8006492:	e7f4      	b.n	800647e <__utoa+0x5e>
 8006494:	460b      	mov	r3, r1
 8006496:	e7e2      	b.n	800645e <__utoa+0x3e>
 8006498:	08006540 	.word	0x08006540

0800649c <_init>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr

080064a8 <_fini>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	bf00      	nop
 80064ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ae:	bc08      	pop	{r3}
 80064b0:	469e      	mov	lr, r3
 80064b2:	4770      	bx	lr
